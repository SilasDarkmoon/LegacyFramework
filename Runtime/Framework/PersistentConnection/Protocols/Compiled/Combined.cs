// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Src/Combined.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Protocols {

  /// <summary>Holder for reflection information generated from Src/Combined.proto</summary>
  public static partial class CombinedReflection {

    #region Descriptor
    /// <summary>File descriptor for Src/Combined.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CombinedReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJTcmMvQ29tYmluZWQucHJvdG8SCXByb3RvY29scyIQCg5TZXJ2ZXJTdGF0",
            "dXNPcCImChBTZXJ2ZXJTdGF0dXNSZXNwEhIKClJvb21TdGF0dXMYASADKA0i",
            "BQoDTm9wIgcKBVJlc2V0Ii4KEU9wcG9uZW50Q29ubmVjdGVkEgsKA3VpZBgB",
            "IAEoCRIMCgRuYW1lGAIgASgJIhYKFE9wcG9uZW50RGlzY29ubmVjdGVkIjAK",
            "DEdhbWVyc1N0YXR1cxIPCgdob21lUlRUGAEgASgNEg8KB2F3YXlSVFQYAiAB",
            "KA0iOgoPQ29ubmVjdFRvUm9vbU9wEgsKA3VpZBgBIAEoCRIMCgRuYW1lGAIg",
            "ASgJEgwKBHJvb20YAyABKAkiWAoRQ29ubmVjdFRvUm9vbVJlc3ASDwoHc3Vj",
            "Y2VzcxgBIAEoCBIhCgRzaWRlGAIgASgOMhMucHJvdG9jb2xzLlRlYW1TaWRl",
            "Eg8KB3N0YXJ0ZWQYAyABKAgiHgoMQ2hhbmdlU2lkZU9wEg4KBmFjY2VwdBgB",
            "IAEoCCIUChJDaGFuZ2VTaWRlUXVlc3Rpb24iMwoOQ2hhbmdlU2lkZVJlc3AS",
            "IQoEc2lkZRgBIAEoDjITLnByb3RvY29scy5UZWFtU2lkZSIeCgxTdGFydE1h",
            "dGNoT3ASDgoGYWNjZXB0GAEgASgIIhQKElN0YXJ0TWF0Y2hRdWVzdGlvbiJg",
            "Cg5TdGFydE1hdGNoUmVzcBIhCgRzaWRlGAEgASgOMhMucHJvdG9jb2xzLlRl",
            "YW1TaWRlEisKBGRhdGEYAiABKAsyHS5wcm90b2NvbHMuRnVsbE1hdGNoU2l0",
            "dWF0aW9uIjgKDk5leHRCYXR0ZXJJbmZvEhQKDGJhdHRpbmdPcmRlchgBIAEo",
            "DRIQCghiYXR0ZXJJZBgCIAEoDSKnAQoSRnVsbE1hdGNoU2l0dWF0aW9uEjEK",
            "Dm1hdGNoU2l0dWF0aW9uGAEgASgLMhkucHJvdG9jb2xzLk1hdGNoU2l0dWF0",
            "aW9uEisKB3BsYXllcnMYAiABKAsyGi5wcm90b2NvbHMuUGxheWVyU2l0dWF0",
            "aW9uEjEKDnBpdGNoU2l0dWF0aW9uGAMgASgLMhkucHJvdG9jb2xzLlBpdGNo",
            "U2l0dWF0aW9uIqACCg5NYXRjaFNpdHVhdGlvbhIOCgZpbm5pbmcYASABKA0S",
            "IwoEaGFsZhgCIAEoDjIVLnByb3RvY29scy5Jbm5pbmdIYWxmEhIKCnBpdGNo",
            "Q291bnQYAyABKA0SCwoDb3V0GAQgASgNEg4KBnN0cmlrZRgFIAEoDRIMCgRi",
            "YWxsGAYgASgNEg0KBWVuZGVkGAcgASgIEikKDGhvbWVUZWFtSW5mbxgIIAEo",
            "CzITLnByb3RvY29scy5UZWFtSW5mbxIpCgxhd2F5VGVhbUluZm8YCSABKAsy",
            "Ey5wcm90b2NvbHMuVGVhbUluZm8SNQoSbmV4dFRocmVlQmF0dGVySWRzGAog",
            "AygLMhkucHJvdG9jb2xzLk5leHRCYXR0ZXJJbmZvIlIKF09uRmllbGRSb2xl",
            "VG9JRE1hcEVudHJ5EisKC29uRmllbGRSb2xlGAEgASgOMhYucHJvdG9jb2xz",
            "Lk9uRmllbGRSb2xlEgoKAmlkGAIgASgNIrMBCghUZWFtSW5mbxIMCgRuYW1l",
            "GAEgASgJEiMKBXN0YXRzGAIgASgLMhQucHJvdG9jb2xzLlRlYW1TdGF0cxIg",
            "CgdjYXB0YWluGAMgASgOMg8ucHJvdG9jb2xzLlJvbGUSJQoMb3JkZXJPZlJv",
            "bGVzGAQgAygOMg8ucHJvdG9jb2xzLlJvbGUSFgoOb3ZlckxvcmRFbmVyZ3kY",
            "BSABKAISEwoLaG9tZVNoaXJ0SUQYBiABKAkilgMKDlBpdGNoU2l0dWF0aW9u",
            "EigKC3BpdGNoZXJTaWRlGAEgASgOMhMucHJvdG9jb2xzLlRlYW1TaWRlEg8K",
            "B3BpdGNoZXIYAiABKA0SDwoHY2F0Y2hlchgDIAEoDRIOCgZiYXR0ZXIYBCAB",
            "KA0SIgoEbW9kZRgFIAEoCzIULnByb3RvY29scy5QaXRjaE1vZGUSMAoKYmF0",
            "dGVyUHJvZhgGIAEoCzIcLnByb3RvY29scy5CYXR0ZXJQcm9maWNpZW5jeRIr",
            "CgtiYXNlUnVubmVycxgHIAEoCzIWLnByb3RvY29scy5CYXNlUnVubmVycxIo",
            "CgVmaWVsZBgIIAEoCzIZLnByb3RvY29scy5GaWVsZFNpdHVhdGlvbhI3Cgtv",
            "bkZpZWxkVG9JRBgJIAMoCzIiLnByb3RvY29scy5PbkZpZWxkUm9sZVRvSURN",
            "YXBFbnRyeRIgChhpbml0UGl0Y2hUYXJnZXRQb3NpdGlvblgYCiABKAISIAoY",
            "aW5pdFBpdGNoVGFyZ2V0UG9zaXRpb25ZGAsgASgCImMKD1BsYXllclNpdHVh",
            "dGlvbhInCghob21lVGVhbRgBIAMoCzIVLnByb3RvY29scy5QbGF5ZXJJbmZv",
            "EicKCGF3YXlUZWFtGAIgAygLMhUucHJvdG9jb2xzLlBsYXllckluZm8i9AUK",
            "ClBsYXllckluZm8SCgoCaWQYASABKA0SLQoJYWJpbGl0aWVzGAIgASgLMhou",
            "cHJvdG9jb2xzLlBsYXllckFiaWxpdGllcxISCgphZGVwdFJvbGVzGAMgAygN",
            "EisKBXN0YXRzGAQgASgLMhwucHJvdG9jb2xzLlBsYXllclNlYXNvblN0YXRz",
            "EgsKA2NpZBgFIAEoCRIPCgdraXROYW1lGAYgASgJEg4KBm51bWJlchgHIAEo",
            "CRINCgVwb3dlchgIIAEoAhIdCgRyb2xlGAkgASgOMg8ucHJvdG9jb2xzLlJv",
            "bGUSKwoLb25GaWVsZFJvbGUYCiABKA4yFi5wcm90b2NvbHMuT25GaWVsZFJv",
            "bGUSJgoJcGl0Y2hIYW5kGAsgASgOMhMucHJvdG9jb2xzLkhhbmRUeXBlEiwK",
            "CnBpdGNoVHlwZXMYDCADKAsyGC5wcm90b2NvbHMuUGl0Y2hUeXBlSW5mbxIo",
            "CgtiYXR0aW5nSGFuZBgNIAEoDjITLnByb3RvY29scy5IYW5kVHlwZRI5ChJi",
            "YXR0aW5nUHJvZmljaWVuY3kYDiABKAsyHS5wcm90b2NvbHMuQmF0dGluZ1By",
            "b2ZpY2llbmN5Ei4KDWRvbWluYXRlVHlwZXMYDyADKA4yFy5wcm90b2NvbHMu",
            "RG9taW5hdGVUeXBlEhcKD3BsYXRlQXBwZWFyYW5jZRgQIAEoDRIOCgZhdEJh",
            "dHMYESABKA0SDAoEcnVucxgSIAEoDRIMCgRoaXRzGBMgASgNEg4KBmVycm9y",
            "cxgUIAEoDRIQCghob21lUnVucxgVIAEoDRISCgpwaXRjaENvdW50GBYgASgN",
            "EhwKFGxlZnRFbmVyZ3lQZXJjZW50YWdlGBcgASgCEhEKCXBvc2l0aW9uWBgY",
            "IAEoAhIRCglwb3NpdGlvblkYGSABKAISEQoJcm90YXRpb25YGBogASgCEhEK",
            "CXJvdGF0aW9uWRgbIAEoAhIRCglyb3RhdGlvbloYHCABKAIivQEKD1BsYXll",
            "ckFiaWxpdGllcxIPCgdjb250YWN0GAEgASgCEhAKCHNsdWdnaW5nGAIgASgC",
            "EhMKC2Jhc2VSdW5uaW5nGAMgASgCEhAKCGZpZWxkaW5nGAQgASgCEhUKDXBs",
            "YXRlRGlzcGxpbmUYBSABKAISDwoHc3RhbWluYRgGIAEoAhIPCgdjb250cm9s",
            "GAcgASgCEhAKCGJyZWFraW5nGAggASgCEhUKDWV4cGxvc2l2ZW5lc3MYCSAB",
            "KAIifAoRUGxheWVyU2Vhc29uU3RhdHMSCwoDYXZnGAEgASgCEgoKAmhyGAIg",
            "ASgCEgsKA3JiaRgDIAEoAhIKCgJzYhgEIAEoAhILCgN3aW4YBSABKAISDAoE",
            "bG9zZRgGIAEoAhILCgNlcmEYByABKAISDQoFZ2FtZXMYCCABKA0iXQoNUGl0",
            "Y2hUeXBlSW5mbxIiCgR0eXBlGAEgASgOMhQucHJvdG9jb2xzLlBpdGNoVHlw",
            "ZRIoCgVncmFkZRgCIAEoDjIZLnByb3RvY29scy5QaXRjaFR5cGVHcmFkZSI7",
            "ChJCYXR0aW5nUHJvZmljaWVuY3kSEgoKZ29vZEJsb2NrcxgBIAMoDRIRCgli",
            "YWRCbG9ja3MYAiADKA0iEAoORmllbGRTaXR1YXRpb24iOwoQRG9taW5hdGVP",
            "cFN0YXR1cxINCgVjb3VudBgBIAEoDRIYChBjb3VudEJ5UGl0Y2hUeXBlGAIg",
            "AygNIoIBCg5Eb21pbmF0ZVN0YXR1cxIdChVwaXRjaGVyT3ZlckxvcmRFbmVy",
            "Z3kYASABKAISHAoUYmF0dGVyT3ZlckxvcmRFbmVyZ3kYAiABKAISMwoOYWN0",
            "aXZlT3BTdGF0dXMYAyADKAsyGy5wcm90b2NvbHMuRG9taW5hdGVPcFN0YXR1",
            "cyKmAQoJUGl0Y2hNb2RlEisKCGRvbWluYXRlGAEgASgLMhkucHJvdG9jb2xz",
            "LkRvbWluYXRlU3RhdHVzEisKC2JhdHRpbmdNb2RlGAIgASgOMhYucHJvdG9j",
            "b2xzLkJhdHRpbmdNb2RlEi0KCXN0ZWFsQmFzZRgDIAEoCzIaLnByb3RvY29s",
            "cy5TdGVhbEJhc2VTdGF0dXMSEAoIYXV0b1BsYXkYBCABKAgiLgoRQmF0dGVy",
            "UHJvZmljaWVuY3kSDAoEZ29vZBgBIAMoDRILCgNiYWQYAiADKA0ioQEKDlBp",
            "dGNoU2VsZWN0aW9uEhAKCGJhbGxUeXBlGAEgASgNEg8KB3RhcmdldFgYAiAB",
            "KAISDwoHdGFyZ2V0WRgDIAEoAhISCgpwdXp6bGVUeXBlGAQgASgNEgwKBGV2",
            "YWwYBSABKA0SEgoKcGl0Y2hTcGVlZBgGIAEoAhIUCgxvZmZzZXRMZW5ndGgY",
            "ByABKAISDwoHcGlja29mZhgIIAEoDSLzAQoLQmF0dGluZ0luZm8SDAoEYXV0",
            "bxgBIAEoCBILCgNiYXQYAiABKAgSDAoEdGltZRgDIAEoDRIeCgNkaXIYBCAB",
            "KA4yES5wcm90b2NvbHMuQmF0RGlyEi8KBGV2YWwYBSABKA4yIS5wcm90b2Nv",
            "bHMuQmF0T3BlcmF0aW9uUmVzdWx0VHlwZRInCgliYXRPcFR5cGUYBiABKA4y",
            "FC5wcm90b2NvbHMuQmF0T3BUeXBlEg8KB3RhcmdldFkYByABKAISFwoPdGFy",
            "Z2V0WEFmdGVyQmF0GAggASgCEhcKD3RhcmdldFlBZnRlckJhdBgJIAEoAiI7",
            "CgtCYXNlUnVubmVycxINCgVmaXJzdBgBIAEoDRIOCgZzZWNvbmQYAiABKA0S",
            "DQoFdGhpcmQYAyABKA0i/wIKCFJ1bkZyYW1lEiUKBHR5cGUYZCABKA4yFy5w",
            "cm90b2NvbHMuUnVuRnJhbWVUeXBlEjkKEGZyYW1lRGVmZW5zZU1vdmUYASAB",
            "KAsyHy5wcm90b2NvbHMuUnVuRnJhbWVfRGVmZW5zZU1vdmUSMQoMZnJhbWVS",
            "dW5CYXNlGAIgASgLMhsucHJvdG9jb2xzLlJ1bkZyYW1lX1J1bkJhc2USLQoK",
            "ZnJhbWVDYXRjaBgDIAEoCzIZLnByb3RvY29scy5SdW5GcmFtZV9DYXRjaBI7",
            "ChFmcmFtZUhpdEJhbGxDYXRjaBgEIAEoCzIgLnByb3RvY29scy5SdW5GcmFt",
            "ZV9IaXRCYWxsQ2F0Y2gSMQoMZnJhbWVQaWNrb2ZmGAUgASgLMhsucHJvdG9j",
            "b2xzLlJ1bkZyYW1lX1BpY2tvZmYSPwoTZnJhbWVDYXRjaGVyUGlja29mZhgG",
            "IAEoCzIiLnByb3RvY29scy5SdW5GcmFtZV9DYXRjaGVyUGlja29mZiLCAQoU",
            "UnVuRnJhbWVfRGVmZW5zZU1vdmUSEQoJc3RhcnRUaW1lGAEgASgCEg8KB2Vu",
            "ZFRpbWUYAiABKAISJgoGcGxheWVyGAMgASgOMhYucHJvdG9jb2xzLk9uRmll",
            "bGRSb2xlEiwKDHRhcmdldFBhc3NlchgEIAEoDjIWLnByb3RvY29scy5PbkZp",
            "ZWxkUm9sZRIOCgZ0b0Jhc2UYBSABKA0SDwoHdGFyZ2V0WBgGIAEoAhIPCgd0",
            "YXJnZXRZGAcgASgCIpEBChBSdW5GcmFtZV9SdW5CYXNlEhEKCXN0YXJ0VGlt",
            "ZRgBIAEoAhIPCgdlbmRUaW1lGAIgASgCEiYKBnJ1bm5lchgDIAEoDjIWLnBy",
            "b3RvY29scy5PbkZpZWxkUm9sZRIQCghmcm9tQmFzZRgEIAEoDRIOCgZ0b0Jh",
            "c2UYBSABKA0SDwoHb3V0VGltZRgGIAEoAiLRAQoOUnVuRnJhbWVfQ2F0Y2gS",
            "DwoHZW5kVGltZRgBIAEoAhImCgZwYXNzZXIYAiABKA4yFi5wcm90b2NvbHMu",
            "T25GaWVsZFJvbGUSJwoHY2F0Y2hlchgDIAEoDjIWLnByb3RvY29scy5PbkZp",
            "ZWxkUm9sZRIOCgZ0b0Jhc2UYBCABKA0SFgoOaGl0R3JvdW5kVGltZXMYBSAB",
            "KA0SNQoVb3V0QXRobGV0ZU9uRmllbGRSb2xlGAYgASgOMhYucHJvdG9jb2xz",
            "Lk9uRmllbGRSb2xlIv8BChVSdW5GcmFtZV9IaXRCYWxsQ2F0Y2gSEQoJc3Rh",
            "cnRUaW1lGAEgASgCEg8KB2VuZFRpbWUYAiABKAISJwoHY2F0Y2hlchgDIAEo",
            "DjIWLnByb3RvY29scy5PbkZpZWxkUm9sZRIPCgd0YXJnZXRYGAQgASgCEg8K",
            "B3RhcmdldFkYBSABKAISFgoOaGl0R3JvdW5kVGltZXMYBiABKA0SFQoNaXNS",
            "b2xsaW5nQmFsbBgHIAEoCBI1ChVvdXRBdGhsZXRlT25GaWVsZFJvbGUYCCAB",
            "KA4yFi5wcm90b2NvbHMuT25GaWVsZFJvbGUSEQoJaXNIaXRXYWxsGAkgASgI",
            "Ii8KEFJ1bkZyYW1lX1BpY2tvZmYSDAoEYmFzZRgBIAEoDRINCgVpc091dBgC",
            "IAEoCCKrAQoXUnVuRnJhbWVfQ2F0Y2hlclBpY2tvZmYSDwoHZW5kVGltZRgB",
            "IAEoAhIPCgdvdXRUaW1lGAIgASgCEicKB2NhdGNoZXIYAyABKA4yFi5wcm90",
            "b2NvbHMuT25GaWVsZFJvbGUSDgoGdG9CYXNlGAQgASgNEjUKFW91dEF0aGxl",
            "dGVPbkZpZWxkUm9sZRgFIAEoDjIWLnByb3RvY29scy5PbkZpZWxkUm9sZSKq",
            "AwoJQmF0UmVzdWx0EiYKBnJlc3VsdBgBIAEoDjIWLnByb3RvY29scy5QaXRj",
            "aFJlc3VsdBIjCgZmcmFtZXMYAiADKAsyEy5wcm90b2NvbHMuUnVuRnJhbWUS",
            "FAoMcGl0Y2hFbmRUaW1lGAMgASgCEhkKEW91dEZpZWxkUG9zaXRpb25YGAQg",
            "ASgCEhkKEW91dEZpZWxkUG9zaXRpb25aGAUgASgCEhcKD291dEZpZWxkRmx5",
            "VGltZRgGIAEoAhIhChlvdXRGaWVsZEZseUhpdEdyb3VuZFRpbWVzGAcgASgN",
            "EhEKCWlzRmFzdE91dBgIIAEoCBITCgtpc0F1dG9Td2luZxgJIAEoCBI5Chlo",
            "aXRCYWxsQ2F0Y2hlck9uRmllbGRSb2xlGAogASgOMhYucHJvdG9jb2xzLk9u",
            "RmllbGRSb2xlEjEKDnRyYWplY3RvcnlUeXBlGAsgASgOMhkucHJvdG9jb2xz",
            "LlRyYWplY3RvcnlUeXBlEjIKEm11bHRpUGxheURlZmVuZGVycxgMIAMoDjIW",
            "LnByb3RvY29scy5PbkZpZWxkUm9sZSJwChFQb3NzaWJsZUJhdFJlc3VsdBI1",
            "CgpyZXN1bHRUeXBlGAEgASgOMiEucHJvdG9jb2xzLkJhdE9wZXJhdGlvblJl",
            "c3VsdFR5cGUSJAoGcmVzdWx0GAIgASgLMhQucHJvdG9jb2xzLkJhdFJlc3Vs",
            "dCJNCglUZWFtU3RhdHMSDAoEcnVucxgBIAEoDRIMCgRoaXRzGAIgASgNEg4K",
            "BmVycm9ycxgDIAEoDRIUCgxpbm5pbmdTY29yZXMYBCADKA0iUwoWQ2hhbmdl",
            "ZFBsYXllckFiaWxpdGllcxIKCgJpZBgBIAEoDRItCglhYmlsaXRpZXMYAiAB",
            "KAsyGi5wcm90b2NvbHMuUGxheWVyQWJpbGl0aWVzIj0KDVNlbGVjdFBpdGNo",
            "T3ASLAoJc2VsZWN0aW9uGAEgASgLMhkucHJvdG9jb2xzLlBpdGNoU2VsZWN0",
            "aW9uIrMBCg9TZWxlY3RQaXRjaFJlc3ASLAoJc2VsZWN0aW9uGAEgASgLMhku",
            "cHJvdG9jb2xzLlBpdGNoU2VsZWN0aW9uEjUKD3Bvc3NpYmxlUmVzdWx0cxgC",
            "IAMoCzIcLnByb3RvY29scy5Qb3NzaWJsZUJhdFJlc3VsdBI7ChBjaGFuZ2Vk",
            "QWJpbGl0aWVzGAMgAygLMiEucHJvdG9jb2xzLkNoYW5nZWRQbGF5ZXJBYmls",
            "aXRpZXMiRQoPRG9taW5hdGVQaXRjaE9wEiQKAm9wGAEgASgLMhgucHJvdG9j",
            "b2xzLlNlbGVjdFBpdGNoT3ASDAoEZXZhbBgCIAEoDSJLChFEb21pbmF0ZVBp",
            "dGNoUmVzcBIoCgRyZXNwGAEgASgLMhoucHJvdG9jb2xzLlNlbGVjdFBpdGNo",
            "UmVzcBIMCgRldmFsGAIgASgNIiwKBUJhdE9wEiMKA2JhdBgBIAEoCzIWLnBy",
            "b3RvY29scy5CYXR0aW5nSW5mbyKKAQoHQmF0UmVzcBIjCgNiYXQYASABKAsy",
            "Fi5wcm90b2NvbHMuQmF0dGluZ0luZm8SJAoGcmVzdWx0GAIgASgLMhQucHJv",
            "dG9jb2xzLkJhdFJlc3VsdBI0Cg1uZXh0U2l0dWF0aW9uGAMgASgLMh0ucHJv",
            "dG9jb2xzLkZ1bGxNYXRjaFNpdHVhdGlvbiI7Cg1Eb21pbmF0ZUJhdE9wEhwK",
            "Am9wGAEgASgLMhAucHJvdG9jb2xzLkJhdE9wEgwKBGV2YWwYAiABKA0iQQoP",
            "RG9taW5hdGVCYXRSZXNwEiAKBHJlc3AYASABKAsyEi5wcm90b2NvbHMuQmF0",
            "UmVzcBIMCgRldmFsGAIgASgNIh8KDVNldERvbWluYXRlT3ASDgoGYWN0aXZl",
            "GAEgASgIIj0KEFNldERvbWluYXRlRXZlbnQSKQoGc3RhdHVzGAEgASgLMhku",
            "cHJvdG9jb2xzLkRvbWluYXRlU3RhdHVzIowBCg9TdGVhbEJhc2VTdGF0dXMS",
            "DQoFYmFzZTEYASABKAgSDQoFYmFzZTIYAiABKAgSDQoFYmFzZTMYAyABKAgS",
            "GAoQYmFzZTFBZHZhbmNlRGlzdBgEIAEoAhIYChBiYXNlMkFkdmFuY2VEaXN0",
            "GAUgASgCEhgKEGJhc2UzQWR2YW5jZURpc3QYBiABKAIiPAoOU2V0U3RlYWxC",
            "YXNlT3ASKgoGc3RhdHVzGAEgASgLMhoucHJvdG9jb2xzLlN0ZWFsQmFzZVN0",
            "YXR1cyI/ChFTZXRTdGVhbEJhc2VFdmVudBIqCgZzdGF0dXMYASABKAsyGi5w",
            "cm90b2NvbHMuU3RlYWxCYXNlU3RhdHVzIjgKEFNldEJhdHRpbmdNb2RlT3AS",
            "JAoEbW9kZRgBIAEoDjIWLnByb3RvY29scy5CYXR0aW5nTW9kZSI7ChNTZXRC",
            "YXR0aW5nTW9kZUV2ZW50EiQKBG1vZGUYASABKA4yFi5wcm90b2NvbHMuQmF0",
            "dGluZ01vZGUiIAoQTW92ZVRvTmV4dFN0ZXBPcBIMCgRzdGVwGAEgASgNIiIK",
            "Ek1vdmVUb05leHRTdGVwUmVzcBIMCgRzdGVwGAEgASgNIhAKDlBpdGNoUHJl",
            "cGFyZU9wIhAKDlBpdGNoUmVhZHlSZXNwIgsKCUJhdERvbmVPcCINCgtWYWlu",
            "U3dpbmdPcCIQCg5WYWluU3dpbmdFdmVudCISChBQaXRjaGVyVXJnZUV2ZW50",
            "IhEKD0JlZ2luQmF0U3dpbmdPcCIUChJCZWdpbkJhdFN3aW5nRXZlbnQiMwob",
            "U2VsZWN0aW5nQmF0dGluZ1RhcmdldEV2ZW50EgkKAXgYASABKAISCQoBeRgC",
            "IAEoAiI/Cg5GcmFtZVN5bmNCZWdpbhIQCghpbnRlcnZhbBgBIAEoDRINCgVp",
            "bmRleBgCIAEoDRIMCgR0aW1lGAMgASgNIj4KDUZyYW1lU3luY1RpY2sSEAoI",
            "aW50ZXJ2YWwYASABKA0SDQoFaW5kZXgYAiABKA0SDAoEdGltZRgDIAEoDSIO",
            "CgxGcmFtZVN5bmNFbmQiTQoMUnVuVG9CYXNlUmVxEg4KBnRvYmFzZRgBIAEo",
            "DRIPCgdjdXJiYXNlGAIgASgNEgwKBHRpbWUYAyABKA0SDgoGb2Zmc2V0GAQg",
            "ASgCImsKDVJ1blRvQmFzZVJlc3ASJAoGcmVzdWx0GAEgASgLMhQucHJvdG9j",
            "b2xzLkJhdFJlc3VsdBI0Cg1uZXh0U2l0dWF0aW9uGAIgASgLMh0ucHJvdG9j",
            "b2xzLkZ1bGxNYXRjaFNpdHVhdGlvbiorCghUZWFtU2lkZRILCgdOZXV0cmFs",
            "EAASCAoESG9tZRABEggKBEF3YXkQAioyCgpJbm5pbmdIYWxmEg8KC1Vua25v",
            "d25IYWxmEAASBwoDVG9wEAESCgoGQm90dG9tEAIqQwoLQmF0dGluZ01vZGUS",
            "DwoLVW5rbm93bk1vZGUQABILCgdDb250YWN0EAESDAoIU2x1Z2dpbmcQAhII",
            "CgRCdW50EAMqaAoOVHJhamVjdG9yeVR5cGUSGQoVVW5rbm93blRyYWplY3Rv",
            "cnlUeXBlEAASEQoNTG93VHJhamVjdG9yeRABEhQKEE1pZGRsZVRyYWplY3Rv",
            "cnkQAhISCg5IaWdoVHJhamVjdG9yeRADKvIBCglQaXRjaFR5cGUSFAoQVW5r",
            "bm93blBpdGNoVHlwZRAAEgwKCEZhc3RCYWxsEAESCgoGU2lua2VyEAISCgoG",
            "U2xpZGVyEAMSCQoFQ3VydmUQBBINCglTY3Jld0JhbGwQBRIMCghDaGFuZ2VV",
            "cBAGEgoKBkN1dHRlchAHEgsKB1R3b1NlYW0QCBIHCgNTZmYQCRIQCgxLbnVj",
            "a2xlQ3VydmUQChIMCghGb3JrQmFsbBALEgoKBlNsdXJ2ZRAMEgwKCFBhbG1C",
            "YWxsEA0SCQoFU2hvb3QQDhILCgdWc2xpZGVyEA8SDQoJU2xvd0N1cnZlEBAq",
            "TgoOUGl0Y2hUeXBlR3JhZGUSGQoVVW5rbm93blBpdGNoVHlwZUdyYWRlEAAS",
            "BQoBRBABEgUKAUMQAhIFCgFCEAMSBQoBQRAEEgUKAVMQBSpQChVNYW51YWxQ",
            "aXRjaFB1enpsZVR5cGUSFQoRVW5rbm93blB1enpsZVR5cGUQABIQCgxQdXp6",
            "bGVTdHJpa2UQARIOCgpQdXp6bGVCYWxsEAIquAEKC1BpdGNoUmVzdWx0EhEK",
            "DVVua25vd25SZXN1bHQQABIICgRCYWxsEAESCgoGU3RyaWtlEAISCAoERm91",
            "bBADEgoKBlNpbmdsZRAEEgoKBkRvdWJsZRAFEgoKBlRyaXBsZRAGEgsKB0hv",
            "bWVSdW4QBxILCgdQaWNrb2ZmEAgSBwoDSUJCEAkSCgoGUHV0T3V0EAoSDAoI",
            "Rm9yY2VPdXQQCxIMCghUb3VjaE91dBAMEgcKA0hCUBANKjMKBkJhdERpchII",
            "CgROb25lEAASCAoETGVmdBABEgoKBkNlbnRlchACEgkKBVJpZ2h0EAMqiAEK",
            "DFJ1bkZyYW1lVHlwZRIXChNVbmtub3duUnVuRnJhbWVUeXBlEAASDwoLRGVm",
            "ZW5zZU1vdmUQARILCgdSdW5CYXNlEAISCQoFQ2F0Y2gQAxIQCgxIaXRCYWxs",
            "Q2F0Y2gQBBIQCgxQaWNrb2ZmRnJhbWUQBRISCg5DYXRjaGVyUGlja29mZhAG",
            "KusBCgRSb2xlEg8KC1Vua25vd25Sb2xlEAASDwoLUGl0Y2hlclJvbGUQARIP",
            "CgtDYXRjaGVyUm9sZRACEhQKEEZpcnN0QmFzZU1hblJvbGUQAxIVChFTZWNv",
            "bmRCYXNlTWFuUm9sZRAEEhQKEFRoaXJkQmFzZU1hblJvbGUQBRIRCg1TaG9y",
            "dHN0b3BSb2xlEAYSEwoPTGVmdEZpZWxkZXJSb2xlEAcSFQoRQ2VudGVyRmll",
            "bGRlclJvbGUQCBIUChBSaWdodEZpZWxkZXJSb2xlEAkSGAoURGVzaWduYXRl",
            "ZEhpdHRlclJvbGUQCiqHAgoLT25GaWVsZFJvbGUSFgoSVW5rbm93bk9uRmll",
            "bGRSb2xlEAASCwoHUGl0Y2hlchABEgsKB0NhdGNoZXIQAhIQCgxGaXJzdEJh",
            "c2VNYW4QAxIRCg1TZWNvbmRCYXNlTWFuEAQSEAoMVGhpcmRCYXNlTWFuEAUS",
            "DQoJU2hvcnRzdG9wEAYSDwoLTGVmdEZpZWxkZXIQBxIRCg1DZW50ZXJGaWVs",
            "ZGVyEAgSEAoMUmlnaHRGaWVsZGVyEAkSCgoGQmF0dGVyEAoSEwoPRmlyc3RC",
            "YXNlUnVubmVyEAsSFAoQU2Vjb25kQmFzZVJ1bm5lchAMEhMKD1RoaXJkQmFz",
            "ZVJ1bm5lchANKkYKCEhhbmRUeXBlEhMKD1Vua25vd25IYW5kVHlwZRAAEgwK",
            "CExlZnRIYW5kEAESDQoJUmlnaHRIYW5kEAISCAoEQm90aBADKoQBChZCYXRP",
            "cGVyYXRpb25SZXN1bHRUeXBlEiEKHVVua25vd25CYXRPcGVyYXRpb25SZXN1",
            "bHRUeXBlEAASCAoEQXV0bxABEgoKBk5vdEJhdBACEg8KC0Vhcmx5T3JMYXRl",
            "EAMSEwoPSnVzdEVhcmx5T3JMYXRlEAQSCwoHUGVyZmVjdBAFKlMKCUJhdE9w",
            "VHlwZRIUChBVbmtub3duQmF0T3BUeXBlEAASCwoHRGVmYXVsdBABEhEKDUd1",
            "ZXNzUGl0Y2hQb3MQAhIQCgxTZWxlY3RIaXRQb3MQAyrSBAoMRG9taW5hdGVU",
            "eXBlEhMKD1Vua25vd25Eb21pbmF0ZRAAEhMKD0JhdHRlckRvbWluYXRlMRAB",
            "EhUKEVNsb3dNb3Rpb25CYXR0aW5nEAESEwoPQmF0dGVyRG9taW5hdGUyEAIS",
            "DgoKQmF0dGluZ0V5ZRACEhMKD0JhdHRlckRvbWluYXRlMxADEhYKEkhpdFRh",
            "cmdldFNlbGVjdGlvbhADEhMKD0JhdHRlckRvbWluYXRlNBAEEhMKD0JhdHRl",
            "ckRvbWluYXRlNRAFEhMKD0JhdHRlckRvbWluYXRlNhAGEhMKD0JhdHRlckRv",
            "bWluYXRlNxAHEhMKD0JhdHRlckRvbWluYXRlOBAIEhMKD0JhdHRlckRvbWlu",
            "YXRlORAJEhQKEEJhdHRlckRvbWluYXRlMTAQChIUChBQaXRjaGVyRG9taW5h",
            "dGUxEAsSEwoPTGlnaHRTcGVlZFBpdGNoEAsSFAoQUGl0Y2hlckRvbWluYXRl",
            "MhAMEg4KClN1cGVyQ3VydmUQDBIUChBQaXRjaGVyRG9taW5hdGUzEA0SFQoR",
            "VW5kZXJDb250cm9sUGl0Y2gQDRIUChBQaXRjaGVyRG9taW5hdGU0EA4SFAoQ",
            "UGl0Y2hlckRvbWluYXRlNRAPEhQKEFBpdGNoZXJEb21pbmF0ZTYQEBIUChBQ",
            "aXRjaGVyRG9taW5hdGU3EBESFAoQUGl0Y2hlckRvbWluYXRlOBASEhQKEFBp",
            "dGNoZXJEb21pbmF0ZTkQExIVChFQaXRjaGVyRG9taW5hdGUxMBAUGgIQAWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Protocols.TeamSide), typeof(global::Protocols.InningHalf), typeof(global::Protocols.BattingMode), typeof(global::Protocols.TrajectoryType), typeof(global::Protocols.PitchType), typeof(global::Protocols.PitchTypeGrade), typeof(global::Protocols.ManualPitchPuzzleType), typeof(global::Protocols.PitchResult), typeof(global::Protocols.BatDir), typeof(global::Protocols.RunFrameType), typeof(global::Protocols.Role), typeof(global::Protocols.OnFieldRole), typeof(global::Protocols.HandType), typeof(global::Protocols.BatOperationResultType), typeof(global::Protocols.BatOpType), typeof(global::Protocols.DominateType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.ServerStatusOp), global::Protocols.ServerStatusOp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.ServerStatusResp), global::Protocols.ServerStatusResp.Parser, new[]{ "RoomStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.Nop), global::Protocols.Nop.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.Reset), global::Protocols.Reset.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.OpponentConnected), global::Protocols.OpponentConnected.Parser, new[]{ "Uid", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.OpponentDisconnected), global::Protocols.OpponentDisconnected.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.GamersStatus), global::Protocols.GamersStatus.Parser, new[]{ "HomeRTT", "AwayRTT" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.ConnectToRoomOp), global::Protocols.ConnectToRoomOp.Parser, new[]{ "Uid", "Name", "Room" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.ConnectToRoomResp), global::Protocols.ConnectToRoomResp.Parser, new[]{ "Success", "Side", "Started" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.ChangeSideOp), global::Protocols.ChangeSideOp.Parser, new[]{ "Accept" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.ChangeSideQuestion), global::Protocols.ChangeSideQuestion.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.ChangeSideResp), global::Protocols.ChangeSideResp.Parser, new[]{ "Side" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.StartMatchOp), global::Protocols.StartMatchOp.Parser, new[]{ "Accept" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.StartMatchQuestion), global::Protocols.StartMatchQuestion.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.StartMatchResp), global::Protocols.StartMatchResp.Parser, new[]{ "Side", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.NextBatterInfo), global::Protocols.NextBatterInfo.Parser, new[]{ "BattingOrder", "BatterId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.FullMatchSituation), global::Protocols.FullMatchSituation.Parser, new[]{ "MatchSituation", "Players", "PitchSituation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.MatchSituation), global::Protocols.MatchSituation.Parser, new[]{ "Inning", "Half", "PitchCount", "Out", "Strike", "Ball", "Ended", "HomeTeamInfo", "AwayTeamInfo", "NextThreeBatterIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.OnFieldRoleToIDMapEntry), global::Protocols.OnFieldRoleToIDMapEntry.Parser, new[]{ "OnFieldRole", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.TeamInfo), global::Protocols.TeamInfo.Parser, new[]{ "Name", "Stats", "Captain", "OrderOfRoles", "OverLordEnergy", "HomeShirtID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PitchSituation), global::Protocols.PitchSituation.Parser, new[]{ "PitcherSide", "Pitcher", "Catcher", "Batter", "Mode", "BatterProf", "BaseRunners", "Field", "OnFieldToID", "InitPitchTargetPositionX", "InitPitchTargetPositionY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PlayerSituation), global::Protocols.PlayerSituation.Parser, new[]{ "HomeTeam", "AwayTeam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PlayerInfo), global::Protocols.PlayerInfo.Parser, new[]{ "Id", "Abilities", "AdeptRoles", "Stats", "Cid", "KitName", "Number", "Power", "Role", "OnFieldRole", "PitchHand", "PitchTypes", "BattingHand", "BattingProficiency", "DominateTypes", "PlateAppearance", "AtBats", "Runs", "Hits", "Errors", "HomeRuns", "PitchCount", "LeftEnergyPercentage", "PositionX", "PositionY", "RotationX", "RotationY", "RotationZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PlayerAbilities), global::Protocols.PlayerAbilities.Parser, new[]{ "Contact", "Slugging", "BaseRunning", "Fielding", "PlateDispline", "Stamina", "Control", "Breaking", "Explosiveness" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PlayerSeasonStats), global::Protocols.PlayerSeasonStats.Parser, new[]{ "Avg", "Hr", "Rbi", "Sb", "Win", "Lose", "Era", "Games" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PitchTypeInfo), global::Protocols.PitchTypeInfo.Parser, new[]{ "Type", "Grade" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.BattingProficiency), global::Protocols.BattingProficiency.Parser, new[]{ "GoodBlocks", "BadBlocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.FieldSituation), global::Protocols.FieldSituation.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.DominateOpStatus), global::Protocols.DominateOpStatus.Parser, new[]{ "Count", "CountByPitchType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.DominateStatus), global::Protocols.DominateStatus.Parser, new[]{ "PitcherOverLordEnergy", "BatterOverLordEnergy", "ActiveOpStatus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PitchMode), global::Protocols.PitchMode.Parser, new[]{ "Dominate", "BattingMode", "StealBase", "AutoPlay" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.BatterProficiency), global::Protocols.BatterProficiency.Parser, new[]{ "Good", "Bad" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PitchSelection), global::Protocols.PitchSelection.Parser, new[]{ "BallType", "TargetX", "TargetY", "PuzzleType", "Eval", "PitchSpeed", "OffsetLength", "Pickoff" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.BattingInfo), global::Protocols.BattingInfo.Parser, new[]{ "Auto", "Bat", "Time", "Dir", "Eval", "BatOpType", "TargetY", "TargetXAfterBat", "TargetYAfterBat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.BaseRunners), global::Protocols.BaseRunners.Parser, new[]{ "First", "Second", "Third" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.RunFrame), global::Protocols.RunFrame.Parser, new[]{ "Type", "FrameDefenseMove", "FrameRunBase", "FrameCatch", "FrameHitBallCatch", "FramePickoff", "FrameCatcherPickoff" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.RunFrame_DefenseMove), global::Protocols.RunFrame_DefenseMove.Parser, new[]{ "StartTime", "EndTime", "Player", "TargetPasser", "ToBase", "TargetX", "TargetY" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.RunFrame_RunBase), global::Protocols.RunFrame_RunBase.Parser, new[]{ "StartTime", "EndTime", "Runner", "FromBase", "ToBase", "OutTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.RunFrame_Catch), global::Protocols.RunFrame_Catch.Parser, new[]{ "EndTime", "Passer", "Catcher", "ToBase", "HitGroundTimes", "OutAthleteOnFieldRole" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.RunFrame_HitBallCatch), global::Protocols.RunFrame_HitBallCatch.Parser, new[]{ "StartTime", "EndTime", "Catcher", "TargetX", "TargetY", "HitGroundTimes", "IsRollingBall", "OutAthleteOnFieldRole", "IsHitWall" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.RunFrame_Pickoff), global::Protocols.RunFrame_Pickoff.Parser, new[]{ "Base", "IsOut" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.RunFrame_CatcherPickoff), global::Protocols.RunFrame_CatcherPickoff.Parser, new[]{ "EndTime", "OutTime", "Catcher", "ToBase", "OutAthleteOnFieldRole" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.BatResult), global::Protocols.BatResult.Parser, new[]{ "Result", "Frames", "PitchEndTime", "OutFieldPositionX", "OutFieldPositionZ", "OutFieldFlyTime", "OutFieldFlyHitGroundTimes", "IsFastOut", "IsAutoSwing", "HitBallCatcherOnFieldRole", "TrajectoryType", "MultiPlayDefenders" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PossibleBatResult), global::Protocols.PossibleBatResult.Parser, new[]{ "ResultType", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.TeamStats), global::Protocols.TeamStats.Parser, new[]{ "Runs", "Hits", "Errors", "InningScores" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.ChangedPlayerAbilities), global::Protocols.ChangedPlayerAbilities.Parser, new[]{ "Id", "Abilities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.SelectPitchOp), global::Protocols.SelectPitchOp.Parser, new[]{ "Selection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.SelectPitchResp), global::Protocols.SelectPitchResp.Parser, new[]{ "Selection", "PossibleResults", "ChangedAbilities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.DominatePitchOp), global::Protocols.DominatePitchOp.Parser, new[]{ "Op", "Eval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.DominatePitchResp), global::Protocols.DominatePitchResp.Parser, new[]{ "Resp", "Eval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.BatOp), global::Protocols.BatOp.Parser, new[]{ "Bat" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.BatResp), global::Protocols.BatResp.Parser, new[]{ "Bat", "Result", "NextSituation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.DominateBatOp), global::Protocols.DominateBatOp.Parser, new[]{ "Op", "Eval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.DominateBatResp), global::Protocols.DominateBatResp.Parser, new[]{ "Resp", "Eval" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.SetDominateOp), global::Protocols.SetDominateOp.Parser, new[]{ "Active" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.SetDominateEvent), global::Protocols.SetDominateEvent.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.StealBaseStatus), global::Protocols.StealBaseStatus.Parser, new[]{ "Base1", "Base2", "Base3", "Base1AdvanceDist", "Base2AdvanceDist", "Base3AdvanceDist" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.SetStealBaseOp), global::Protocols.SetStealBaseOp.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.SetStealBaseEvent), global::Protocols.SetStealBaseEvent.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.SetBattingModeOp), global::Protocols.SetBattingModeOp.Parser, new[]{ "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.SetBattingModeEvent), global::Protocols.SetBattingModeEvent.Parser, new[]{ "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.MoveToNextStepOp), global::Protocols.MoveToNextStepOp.Parser, new[]{ "Step" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.MoveToNextStepResp), global::Protocols.MoveToNextStepResp.Parser, new[]{ "Step" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PitchPrepareOp), global::Protocols.PitchPrepareOp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PitchReadyResp), global::Protocols.PitchReadyResp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.BatDoneOp), global::Protocols.BatDoneOp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.VainSwingOp), global::Protocols.VainSwingOp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.VainSwingEvent), global::Protocols.VainSwingEvent.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.PitcherUrgeEvent), global::Protocols.PitcherUrgeEvent.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.BeginBatSwingOp), global::Protocols.BeginBatSwingOp.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.BeginBatSwingEvent), global::Protocols.BeginBatSwingEvent.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.SelectingBattingTargetEvent), global::Protocols.SelectingBattingTargetEvent.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.FrameSyncBegin), global::Protocols.FrameSyncBegin.Parser, new[]{ "Interval", "Index", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.FrameSyncTick), global::Protocols.FrameSyncTick.Parser, new[]{ "Interval", "Index", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.FrameSyncEnd), global::Protocols.FrameSyncEnd.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.RunToBaseReq), global::Protocols.RunToBaseReq.Parser, new[]{ "Tobase", "Curbase", "Time", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Protocols.RunToBaseResp), global::Protocols.RunToBaseResp.Parser, new[]{ "Result", "NextSituation" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TeamSide {
    [pbr::OriginalName("Neutral")] Neutral = 0,
    [pbr::OriginalName("Home")] Home = 1,
    [pbr::OriginalName("Away")] Away = 2,
  }

  public enum InningHalf {
    [pbr::OriginalName("UnknownHalf")] UnknownHalf = 0,
    [pbr::OriginalName("Top")] Top = 1,
    [pbr::OriginalName("Bottom")] Bottom = 2,
  }

  public enum BattingMode {
    [pbr::OriginalName("UnknownMode")] UnknownMode = 0,
    [pbr::OriginalName("Contact")] Contact = 1,
    [pbr::OriginalName("Slugging")] Slugging = 2,
    [pbr::OriginalName("Bunt")] Bunt = 3,
  }

  public enum TrajectoryType {
    [pbr::OriginalName("UnknownTrajectoryType")] UnknownTrajectoryType = 0,
    [pbr::OriginalName("LowTrajectory")] LowTrajectory = 1,
    [pbr::OriginalName("MiddleTrajectory")] MiddleTrajectory = 2,
    [pbr::OriginalName("HighTrajectory")] HighTrajectory = 3,
  }

  public enum PitchType {
    [pbr::OriginalName("UnknownPitchType")] UnknownPitchType = 0,
    [pbr::OriginalName("FastBall")] FastBall = 1,
    [pbr::OriginalName("Sinker")] Sinker = 2,
    [pbr::OriginalName("Slider")] Slider = 3,
    [pbr::OriginalName("Curve")] Curve = 4,
    [pbr::OriginalName("ScrewBall")] ScrewBall = 5,
    [pbr::OriginalName("ChangeUp")] ChangeUp = 6,
    [pbr::OriginalName("Cutter")] Cutter = 7,
    [pbr::OriginalName("TwoSeam")] TwoSeam = 8,
    [pbr::OriginalName("Sff")] Sff = 9,
    [pbr::OriginalName("KnuckleCurve")] KnuckleCurve = 10,
    [pbr::OriginalName("ForkBall")] ForkBall = 11,
    [pbr::OriginalName("Slurve")] Slurve = 12,
    [pbr::OriginalName("PalmBall")] PalmBall = 13,
    [pbr::OriginalName("Shoot")] Shoot = 14,
    [pbr::OriginalName("Vslider")] Vslider = 15,
    [pbr::OriginalName("SlowCurve")] SlowCurve = 16,
  }

  public enum PitchTypeGrade {
    [pbr::OriginalName("UnknownPitchTypeGrade")] UnknownPitchTypeGrade = 0,
    [pbr::OriginalName("D")] D = 1,
    [pbr::OriginalName("C")] C = 2,
    [pbr::OriginalName("B")] B = 3,
    [pbr::OriginalName("A")] A = 4,
    [pbr::OriginalName("S")] S = 5,
  }

  public enum ManualPitchPuzzleType {
    [pbr::OriginalName("UnknownPuzzleType")] UnknownPuzzleType = 0,
    [pbr::OriginalName("PuzzleStrike")] PuzzleStrike = 1,
    [pbr::OriginalName("PuzzleBall")] PuzzleBall = 2,
  }

  public enum PitchResult {
    [pbr::OriginalName("UnknownResult")] UnknownResult = 0,
    /// <summary>
    ///坏球
    /// </summary>
    [pbr::OriginalName("Ball")] Ball = 1,
    /// <summary>
    ///好球
    /// </summary>
    [pbr::OriginalName("Strike")] Strike = 2,
    /// <summary>
    ///界外球
    /// </summary>
    [pbr::OriginalName("Foul")] Foul = 3,
    /// <summary>
    ///一垒安打
    /// </summary>
    [pbr::OriginalName("Single")] Single = 4,
    /// <summary>
    ///二垒安打
    /// </summary>
    [pbr::OriginalName("Double")] Double = 5,
    /// <summary>
    ///三垒安打
    /// </summary>
    [pbr::OriginalName("Triple")] Triple = 6,
    /// <summary>
    ///全垒打
    /// </summary>
    [pbr::OriginalName("HomeRun")] HomeRun = 7,
    /// <summary>
    ///牵制
    /// </summary>
    [pbr::OriginalName("Pickoff")] Pickoff = 8,
    /// <summary>
    ///故意四坏
    /// </summary>
    [pbr::OriginalName("IBB")] Ibb = 9,
    /// <summary>
    ///接杀
    /// </summary>
    [pbr::OriginalName("PutOut")] PutOut = 10,
    /// <summary>
    ///封杀
    /// </summary>
    [pbr::OriginalName("ForceOut")] ForceOut = 11,
    /// <summary>
    ///触杀
    /// </summary>
    [pbr::OriginalName("TouchOut")] TouchOut = 12,
    /// <summary>
    ///触身球
    /// </summary>
    [pbr::OriginalName("HBP")] Hbp = 13,
  }

  public enum BatDir {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Left")] Left = 1,
    [pbr::OriginalName("Center")] Center = 2,
    [pbr::OriginalName("Right")] Right = 3,
  }

  public enum RunFrameType {
    [pbr::OriginalName("UnknownRunFrameType")] UnknownRunFrameType = 0,
    [pbr::OriginalName("DefenseMove")] DefenseMove = 1,
    [pbr::OriginalName("RunBase")] RunBase = 2,
    [pbr::OriginalName("Catch")] Catch = 3,
    [pbr::OriginalName("HitBallCatch")] HitBallCatch = 4,
    [pbr::OriginalName("PickoffFrame")] PickoffFrame = 5,
    [pbr::OriginalName("CatcherPickoff")] CatcherPickoff = 6,
  }

  public enum Role {
    [pbr::OriginalName("UnknownRole")] UnknownRole = 0,
    [pbr::OriginalName("PitcherRole")] PitcherRole = 1,
    [pbr::OriginalName("CatcherRole")] CatcherRole = 2,
    [pbr::OriginalName("FirstBaseManRole")] FirstBaseManRole = 3,
    [pbr::OriginalName("SecondBaseManRole")] SecondBaseManRole = 4,
    [pbr::OriginalName("ThirdBaseManRole")] ThirdBaseManRole = 5,
    [pbr::OriginalName("ShortstopRole")] ShortstopRole = 6,
    [pbr::OriginalName("LeftFielderRole")] LeftFielderRole = 7,
    [pbr::OriginalName("CenterFielderRole")] CenterFielderRole = 8,
    [pbr::OriginalName("RightFielderRole")] RightFielderRole = 9,
    [pbr::OriginalName("DesignatedHitterRole")] DesignatedHitterRole = 10,
  }

  public enum OnFieldRole {
    [pbr::OriginalName("UnknownOnFieldRole")] UnknownOnFieldRole = 0,
    [pbr::OriginalName("Pitcher")] Pitcher = 1,
    [pbr::OriginalName("Catcher")] Catcher = 2,
    [pbr::OriginalName("FirstBaseMan")] FirstBaseMan = 3,
    [pbr::OriginalName("SecondBaseMan")] SecondBaseMan = 4,
    [pbr::OriginalName("ThirdBaseMan")] ThirdBaseMan = 5,
    [pbr::OriginalName("Shortstop")] Shortstop = 6,
    [pbr::OriginalName("LeftFielder")] LeftFielder = 7,
    [pbr::OriginalName("CenterFielder")] CenterFielder = 8,
    [pbr::OriginalName("RightFielder")] RightFielder = 9,
    [pbr::OriginalName("Batter")] Batter = 10,
    [pbr::OriginalName("FirstBaseRunner")] FirstBaseRunner = 11,
    [pbr::OriginalName("SecondBaseRunner")] SecondBaseRunner = 12,
    [pbr::OriginalName("ThirdBaseRunner")] ThirdBaseRunner = 13,
  }

  public enum HandType {
    [pbr::OriginalName("UnknownHandType")] UnknownHandType = 0,
    [pbr::OriginalName("LeftHand")] LeftHand = 1,
    [pbr::OriginalName("RightHand")] RightHand = 2,
    [pbr::OriginalName("Both")] Both = 3,
  }

  public enum BatOperationResultType {
    [pbr::OriginalName("UnknownBatOperationResultType")] UnknownBatOperationResultType = 0,
    [pbr::OriginalName("Auto")] Auto = 1,
    [pbr::OriginalName("NotBat")] NotBat = 2,
    [pbr::OriginalName("EarlyOrLate")] EarlyOrLate = 3,
    [pbr::OriginalName("JustEarlyOrLate")] JustEarlyOrLate = 4,
    [pbr::OriginalName("Perfect")] Perfect = 5,
  }

  public enum BatOpType {
    [pbr::OriginalName("UnknownBatOpType")] UnknownBatOpType = 0,
    [pbr::OriginalName("Default")] Default = 1,
    [pbr::OriginalName("GuessPitchPos")] GuessPitchPos = 2,
    [pbr::OriginalName("SelectHitPos")] SelectHitPos = 3,
  }

  public enum DominateType {
    [pbr::OriginalName("UnknownDominate")] UnknownDominate = 0,
    /// <summary>
    /// 停滞击球
    /// </summary>
    [pbr::OriginalName("BatterDominate1")] BatterDominate1 = 1,
    [pbr::OriginalName("SlowMotionBatting", PreferredAlias = false)] SlowMotionBatting = 1,
    /// <summary>
    /// 预知球路
    /// </summary>
    [pbr::OriginalName("BatterDominate2")] BatterDominate2 = 2,
    [pbr::OriginalName("BattingEye", PreferredAlias = false)] BattingEye = 2,
    /// <summary>
    /// 定向击球
    /// </summary>
    [pbr::OriginalName("BatterDominate3")] BatterDominate3 = 3,
    [pbr::OriginalName("HitTargetSelection", PreferredAlias = false)] HitTargetSelection = 3,
    [pbr::OriginalName("BatterDominate4")] BatterDominate4 = 4,
    [pbr::OriginalName("BatterDominate5")] BatterDominate5 = 5,
    [pbr::OriginalName("BatterDominate6")] BatterDominate6 = 6,
    [pbr::OriginalName("BatterDominate7")] BatterDominate7 = 7,
    [pbr::OriginalName("BatterDominate8")] BatterDominate8 = 8,
    [pbr::OriginalName("BatterDominate9")] BatterDominate9 = 9,
    [pbr::OriginalName("BatterDominate10")] BatterDominate10 = 10,
    /// <summary>
    /// 光速直球
    /// </summary>
    [pbr::OriginalName("PitcherDominate1")] PitcherDominate1 = 11,
    [pbr::OriginalName("LightSpeedPitch", PreferredAlias = false)] LightSpeedPitch = 11,
    /// <summary>
    /// 超级曲球
    /// </summary>
    [pbr::OriginalName("PitcherDominate2")] PitcherDominate2 = 12,
    [pbr::OriginalName("SuperCurve", PreferredAlias = false)] SuperCurve = 12,
    /// <summary>
    /// 可控投球
    /// </summary>
    [pbr::OriginalName("PitcherDominate3")] PitcherDominate3 = 13,
    [pbr::OriginalName("UnderControlPitch", PreferredAlias = false)] UnderControlPitch = 13,
    [pbr::OriginalName("PitcherDominate4")] PitcherDominate4 = 14,
    [pbr::OriginalName("PitcherDominate5")] PitcherDominate5 = 15,
    [pbr::OriginalName("PitcherDominate6")] PitcherDominate6 = 16,
    [pbr::OriginalName("PitcherDominate7")] PitcherDominate7 = 17,
    [pbr::OriginalName("PitcherDominate8")] PitcherDominate8 = 18,
    [pbr::OriginalName("PitcherDominate9")] PitcherDominate9 = 19,
    [pbr::OriginalName("PitcherDominate10")] PitcherDominate10 = 20,
  }

  #endregion

  #region Messages
  /// <summary>
  ///[RegID(1001)]
  /// </summary>
  public sealed partial class ServerStatusOp : pb::IMessage<ServerStatusOp> {
    private static readonly pb::MessageParser<ServerStatusOp> _parser = new pb::MessageParser<ServerStatusOp>(() => new ServerStatusOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerStatusOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusOp(ServerStatusOp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusOp Clone() {
      return new ServerStatusOp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerStatusOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerStatusOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerStatusOp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ServerStatusResp : pb::IMessage<ServerStatusResp> {
    private static readonly pb::MessageParser<ServerStatusResp> _parser = new pb::MessageParser<ServerStatusResp>(() => new ServerStatusResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerStatusResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusResp(ServerStatusResp other) : this() {
      roomStatus_ = other.roomStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerStatusResp Clone() {
      return new ServerStatusResp(this);
    }

    /// <summary>Field number for the "RoomStatus" field.</summary>
    public const int RoomStatusFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_roomStatus_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> roomStatus_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RoomStatus {
      get { return roomStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerStatusResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerStatusResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roomStatus_.Equals(other.roomStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roomStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roomStatus_.WriteTo(output, _repeated_roomStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roomStatus_.CalculateSize(_repeated_roomStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerStatusResp other) {
      if (other == null) {
        return;
      }
      roomStatus_.Add(other.roomStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            roomStatus_.AddEntriesFrom(input, _repeated_roomStatus_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[RegID(101)]
  /// </summary>
  public sealed partial class Nop : pb::IMessage<Nop> {
    private static readonly pb::MessageParser<Nop> _parser = new pb::MessageParser<Nop>(() => new Nop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Nop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nop(Nop other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Nop Clone() {
      return new Nop(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Nop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Nop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Nop other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Reset : pb::IMessage<Reset> {
    private static readonly pb::MessageParser<Reset> _parser = new pb::MessageParser<Reset>(() => new Reset());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Reset> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reset() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reset(Reset other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Reset Clone() {
      return new Reset(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Reset);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Reset other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Reset other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class OpponentConnected : pb::IMessage<OpponentConnected> {
    private static readonly pb::MessageParser<OpponentConnected> _parser = new pb::MessageParser<OpponentConnected>(() => new OpponentConnected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpponentConnected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpponentConnected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpponentConnected(OpponentConnected other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpponentConnected Clone() {
      return new OpponentConnected(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpponentConnected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpponentConnected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpponentConnected other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpponentDisconnected : pb::IMessage<OpponentDisconnected> {
    private static readonly pb::MessageParser<OpponentDisconnected> _parser = new pb::MessageParser<OpponentDisconnected>(() => new OpponentDisconnected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpponentDisconnected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpponentDisconnected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpponentDisconnected(OpponentDisconnected other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpponentDisconnected Clone() {
      return new OpponentDisconnected(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpponentDisconnected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpponentDisconnected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpponentDisconnected other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GamersStatus : pb::IMessage<GamersStatus> {
    private static readonly pb::MessageParser<GamersStatus> _parser = new pb::MessageParser<GamersStatus>(() => new GamersStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GamersStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamersStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamersStatus(GamersStatus other) : this() {
      homeRTT_ = other.homeRTT_;
      awayRTT_ = other.awayRTT_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GamersStatus Clone() {
      return new GamersStatus(this);
    }

    /// <summary>Field number for the "homeRTT" field.</summary>
    public const int HomeRTTFieldNumber = 1;
    private uint homeRTT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HomeRTT {
      get { return homeRTT_; }
      set {
        homeRTT_ = value;
      }
    }

    /// <summary>Field number for the "awayRTT" field.</summary>
    public const int AwayRTTFieldNumber = 2;
    private uint awayRTT_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AwayRTT {
      get { return awayRTT_; }
      set {
        awayRTT_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GamersStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GamersStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HomeRTT != other.HomeRTT) return false;
      if (AwayRTT != other.AwayRTT) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HomeRTT != 0) hash ^= HomeRTT.GetHashCode();
      if (AwayRTT != 0) hash ^= AwayRTT.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HomeRTT != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(HomeRTT);
      }
      if (AwayRTT != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AwayRTT);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HomeRTT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HomeRTT);
      }
      if (AwayRTT != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AwayRTT);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GamersStatus other) {
      if (other == null) {
        return;
      }
      if (other.HomeRTT != 0) {
        HomeRTT = other.HomeRTT;
      }
      if (other.AwayRTT != 0) {
        AwayRTT = other.AwayRTT;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HomeRTT = input.ReadUInt32();
            break;
          }
          case 16: {
            AwayRTT = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[RegID(1)]
  /// </summary>
  public sealed partial class ConnectToRoomOp : pb::IMessage<ConnectToRoomOp> {
    private static readonly pb::MessageParser<ConnectToRoomOp> _parser = new pb::MessageParser<ConnectToRoomOp>(() => new ConnectToRoomOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectToRoomOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToRoomOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToRoomOp(ConnectToRoomOp other) : this() {
      uid_ = other.uid_;
      name_ = other.name_;
      room_ = other.room_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToRoomOp Clone() {
      return new ConnectToRoomOp(this);
    }

    /// <summary>Field number for the "uid" field.</summary>
    public const int UidFieldNumber = 1;
    private string uid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uid {
      get { return uid_; }
      set {
        uid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "room" field.</summary>
    public const int RoomFieldNumber = 3;
    private string room_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Room {
      get { return room_; }
      set {
        room_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectToRoomOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectToRoomOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uid != other.Uid) return false;
      if (Name != other.Name) return false;
      if (Room != other.Room) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Uid.Length != 0) hash ^= Uid.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Room.Length != 0) hash ^= Room.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Room.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Room);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Uid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Room.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Room);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectToRoomOp other) {
      if (other == null) {
        return;
      }
      if (other.Uid.Length != 0) {
        Uid = other.Uid;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Room.Length != 0) {
        Room = other.Room;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Uid = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Room = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectToRoomResp : pb::IMessage<ConnectToRoomResp> {
    private static readonly pb::MessageParser<ConnectToRoomResp> _parser = new pb::MessageParser<ConnectToRoomResp>(() => new ConnectToRoomResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectToRoomResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToRoomResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToRoomResp(ConnectToRoomResp other) : this() {
      success_ = other.success_;
      side_ = other.side_;
      started_ = other.started_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectToRoomResp Clone() {
      return new ConnectToRoomResp(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 2;
    private global::Protocols.TeamSide side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.TeamSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "started" field.</summary>
    public const int StartedFieldNumber = 3;
    private bool started_;
    /// <summary>
    ///FullMatchSituation data = 4; // 这个不应该出现在这里。应该在MatchStart里
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Started {
      get { return started_; }
      set {
        started_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectToRoomResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectToRoomResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Side != other.Side) return false;
      if (Started != other.Started) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (Started != false) hash ^= Started.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Side != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Side);
      }
      if (Started != false) {
        output.WriteRawTag(24);
        output.WriteBool(Started);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (Started != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectToRoomResp other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.Started != false) {
        Started = other.Started;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 16: {
            side_ = (global::Protocols.TeamSide) input.ReadEnum();
            break;
          }
          case 24: {
            Started = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 某个玩家发起换边操作。如果是主动发起，那么accept是true。如果是向服务器应答，那么accept表示是否同意。只会在比赛开始前换边
  /// </summary>
  public sealed partial class ChangeSideOp : pb::IMessage<ChangeSideOp> {
    private static readonly pb::MessageParser<ChangeSideOp> _parser = new pb::MessageParser<ChangeSideOp>(() => new ChangeSideOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeSideOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSideOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSideOp(ChangeSideOp other) : this() {
      accept_ = other.accept_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSideOp Clone() {
      return new ChangeSideOp(this);
    }

    /// <summary>Field number for the "accept" field.</summary>
    public const int AcceptFieldNumber = 1;
    private bool accept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accept {
      get { return accept_; }
      set {
        accept_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeSideOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeSideOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accept != other.Accept) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accept != false) hash ^= Accept.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accept != false) {
        output.WriteRawTag(8);
        output.WriteBool(Accept);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accept != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeSideOp other) {
      if (other == null) {
        return;
      }
      if (other.Accept != false) {
        Accept = other.Accept;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Accept = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 服务器向客户端询问是否同意换边。如果同意需要回复ChangeSideOp{accept=true}，不同意回复ChangeSideOp{accept=false}。只会发生在比赛开始前。
  /// </summary>
  public sealed partial class ChangeSideQuestion : pb::IMessage<ChangeSideQuestion> {
    private static readonly pb::MessageParser<ChangeSideQuestion> _parser = new pb::MessageParser<ChangeSideQuestion>(() => new ChangeSideQuestion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeSideQuestion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSideQuestion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSideQuestion(ChangeSideQuestion other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSideQuestion Clone() {
      return new ChangeSideQuestion(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeSideQuestion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeSideQuestion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeSideQuestion other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// 换边成功的服务器应答。如果只有我方连接了，那么这个会成为ChangeSideOp的响应。
  /// </summary>
  public sealed partial class ChangeSideResp : pb::IMessage<ChangeSideResp> {
    private static readonly pb::MessageParser<ChangeSideResp> _parser = new pb::MessageParser<ChangeSideResp>(() => new ChangeSideResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeSideResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSideResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSideResp(ChangeSideResp other) : this() {
      side_ = other.side_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeSideResp Clone() {
      return new ChangeSideResp(this);
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 1;
    private global::Protocols.TeamSide side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.TeamSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeSideResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeSideResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Side != other.Side) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Side != 0) hash ^= Side.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Side != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Side);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeSideResp other) {
      if (other == null) {
        return;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            side_ = (global::Protocols.TeamSide) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 某个玩家请求开始游戏。参考上面换边操作
  /// </summary>
  public sealed partial class StartMatchOp : pb::IMessage<StartMatchOp> {
    private static readonly pb::MessageParser<StartMatchOp> _parser = new pb::MessageParser<StartMatchOp>(() => new StartMatchOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartMatchOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchOp(StartMatchOp other) : this() {
      accept_ = other.accept_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchOp Clone() {
      return new StartMatchOp(this);
    }

    /// <summary>Field number for the "accept" field.</summary>
    public const int AcceptFieldNumber = 1;
    private bool accept_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accept {
      get { return accept_; }
      set {
        accept_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartMatchOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartMatchOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accept != other.Accept) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accept != false) hash ^= Accept.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accept != false) {
        output.WriteRawTag(8);
        output.WriteBool(Accept);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accept != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartMatchOp other) {
      if (other == null) {
        return;
      }
      if (other.Accept != false) {
        Accept = other.Accept;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Accept = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartMatchQuestion : pb::IMessage<StartMatchQuestion> {
    private static readonly pb::MessageParser<StartMatchQuestion> _parser = new pb::MessageParser<StartMatchQuestion>(() => new StartMatchQuestion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartMatchQuestion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchQuestion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchQuestion(StartMatchQuestion other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchQuestion Clone() {
      return new StartMatchQuestion(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartMatchQuestion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartMatchQuestion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartMatchQuestion other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StartMatchResp : pb::IMessage<StartMatchResp> {
    private static readonly pb::MessageParser<StartMatchResp> _parser = new pb::MessageParser<StartMatchResp>(() => new StartMatchResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartMatchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchResp(StartMatchResp other) : this() {
      side_ = other.side_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartMatchResp Clone() {
      return new StartMatchResp(this);
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 1;
    private global::Protocols.TeamSide side_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.TeamSide Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Protocols.FullMatchSituation data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.FullMatchSituation Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartMatchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartMatchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Side != other.Side) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Side != 0) hash ^= Side.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Side != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Side);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Side);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartMatchResp other) {
      if (other == null) {
        return;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          data_ = new global::Protocols.FullMatchSituation();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            side_ = (global::Protocols.TeamSide) input.ReadEnum();
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::Protocols.FullMatchSituation();
            }
            input.ReadMessage(data_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NextBatterInfo : pb::IMessage<NextBatterInfo> {
    private static readonly pb::MessageParser<NextBatterInfo> _parser = new pb::MessageParser<NextBatterInfo>(() => new NextBatterInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NextBatterInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextBatterInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextBatterInfo(NextBatterInfo other) : this() {
      battingOrder_ = other.battingOrder_;
      batterId_ = other.batterId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NextBatterInfo Clone() {
      return new NextBatterInfo(this);
    }

    /// <summary>Field number for the "battingOrder" field.</summary>
    public const int BattingOrderFieldNumber = 1;
    private uint battingOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BattingOrder {
      get { return battingOrder_; }
      set {
        battingOrder_ = value;
      }
    }

    /// <summary>Field number for the "batterId" field.</summary>
    public const int BatterIdFieldNumber = 2;
    private uint batterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatterId {
      get { return batterId_; }
      set {
        batterId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NextBatterInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NextBatterInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BattingOrder != other.BattingOrder) return false;
      if (BatterId != other.BatterId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BattingOrder != 0) hash ^= BattingOrder.GetHashCode();
      if (BatterId != 0) hash ^= BatterId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BattingOrder != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BattingOrder);
      }
      if (BatterId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BatterId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BattingOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BattingOrder);
      }
      if (BatterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatterId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NextBatterInfo other) {
      if (other == null) {
        return;
      }
      if (other.BattingOrder != 0) {
        BattingOrder = other.BattingOrder;
      }
      if (other.BatterId != 0) {
        BatterId = other.BatterId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BattingOrder = input.ReadUInt32();
            break;
          }
          case 16: {
            BatterId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// 用于断线重连。断线重连只会发生在一次新的击球开始时。
  /// </summary>
  public sealed partial class FullMatchSituation : pb::IMessage<FullMatchSituation> {
    private static readonly pb::MessageParser<FullMatchSituation> _parser = new pb::MessageParser<FullMatchSituation>(() => new FullMatchSituation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FullMatchSituation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FullMatchSituation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FullMatchSituation(FullMatchSituation other) : this() {
      matchSituation_ = other.matchSituation_ != null ? other.matchSituation_.Clone() : null;
      players_ = other.players_ != null ? other.players_.Clone() : null;
      pitchSituation_ = other.pitchSituation_ != null ? other.pitchSituation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FullMatchSituation Clone() {
      return new FullMatchSituation(this);
    }

    /// <summary>Field number for the "matchSituation" field.</summary>
    public const int MatchSituationFieldNumber = 1;
    private global::Protocols.MatchSituation matchSituation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.MatchSituation MatchSituation {
      get { return matchSituation_; }
      set {
        matchSituation_ = value;
      }
    }

    /// <summary>Field number for the "players" field.</summary>
    public const int PlayersFieldNumber = 2;
    private global::Protocols.PlayerSituation players_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.PlayerSituation Players {
      get { return players_; }
      set {
        players_ = value;
      }
    }

    /// <summary>Field number for the "pitchSituation" field.</summary>
    public const int PitchSituationFieldNumber = 3;
    private global::Protocols.PitchSituation pitchSituation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.PitchSituation PitchSituation {
      get { return pitchSituation_; }
      set {
        pitchSituation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FullMatchSituation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FullMatchSituation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MatchSituation, other.MatchSituation)) return false;
      if (!object.Equals(Players, other.Players)) return false;
      if (!object.Equals(PitchSituation, other.PitchSituation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (matchSituation_ != null) hash ^= MatchSituation.GetHashCode();
      if (players_ != null) hash ^= Players.GetHashCode();
      if (pitchSituation_ != null) hash ^= PitchSituation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (matchSituation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MatchSituation);
      }
      if (players_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Players);
      }
      if (pitchSituation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PitchSituation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (matchSituation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchSituation);
      }
      if (players_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Players);
      }
      if (pitchSituation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PitchSituation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FullMatchSituation other) {
      if (other == null) {
        return;
      }
      if (other.matchSituation_ != null) {
        if (matchSituation_ == null) {
          matchSituation_ = new global::Protocols.MatchSituation();
        }
        MatchSituation.MergeFrom(other.MatchSituation);
      }
      if (other.players_ != null) {
        if (players_ == null) {
          players_ = new global::Protocols.PlayerSituation();
        }
        Players.MergeFrom(other.Players);
      }
      if (other.pitchSituation_ != null) {
        if (pitchSituation_ == null) {
          pitchSituation_ = new global::Protocols.PitchSituation();
        }
        PitchSituation.MergeFrom(other.PitchSituation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (matchSituation_ == null) {
              matchSituation_ = new global::Protocols.MatchSituation();
            }
            input.ReadMessage(matchSituation_);
            break;
          }
          case 18: {
            if (players_ == null) {
              players_ = new global::Protocols.PlayerSituation();
            }
            input.ReadMessage(players_);
            break;
          }
          case 26: {
            if (pitchSituation_ == null) {
              pitchSituation_ = new global::Protocols.PitchSituation();
            }
            input.ReadMessage(pitchSituation_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// 可变全局变量
  /// </summary>
  public sealed partial class MatchSituation : pb::IMessage<MatchSituation> {
    private static readonly pb::MessageParser<MatchSituation> _parser = new pb::MessageParser<MatchSituation>(() => new MatchSituation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MatchSituation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchSituation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchSituation(MatchSituation other) : this() {
      inning_ = other.inning_;
      half_ = other.half_;
      pitchCount_ = other.pitchCount_;
      out_ = other.out_;
      strike_ = other.strike_;
      ball_ = other.ball_;
      ended_ = other.ended_;
      homeTeamInfo_ = other.homeTeamInfo_ != null ? other.homeTeamInfo_.Clone() : null;
      awayTeamInfo_ = other.awayTeamInfo_ != null ? other.awayTeamInfo_.Clone() : null;
      nextThreeBatterIds_ = other.nextThreeBatterIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MatchSituation Clone() {
      return new MatchSituation(this);
    }

    /// <summary>Field number for the "inning" field.</summary>
    public const int InningFieldNumber = 1;
    private uint inning_;
    /// <summary>
    /// 现在是第几局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Inning {
      get { return inning_; }
      set {
        inning_ = value;
      }
    }

    /// <summary>Field number for the "half" field.</summary>
    public const int HalfFieldNumber = 2;
    private global::Protocols.InningHalf half_ = 0;
    /// <summary>
    /// 现在是上下半局哪个
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.InningHalf Half {
      get { return half_; }
      set {
        half_ = value;
      }
    }

    /// <summary>Field number for the "pitchCount" field.</summary>
    public const int PitchCountFieldNumber = 3;
    private uint pitchCount_;
    /// <summary>
    /// 这是第几次投球
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PitchCount {
      get { return pitchCount_; }
      set {
        pitchCount_ = value;
      }
    }

    /// <summary>Field number for the "out" field.</summary>
    public const int OutFieldNumber = 4;
    private uint out_;
    /// <summary>
    /// 已经有几个进攻者出局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Out {
      get { return out_; }
      set {
        out_ = value;
      }
    }

    /// <summary>Field number for the "strike" field.</summary>
    public const int StrikeFieldNumber = 5;
    private uint strike_;
    /// <summary>
    /// 几振了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Strike {
      get { return strike_; }
      set {
        strike_ = value;
      }
    }

    /// <summary>Field number for the "ball" field.</summary>
    public const int BallFieldNumber = 6;
    private uint ball_;
    /// <summary>
    /// 几个坏球了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ball {
      get { return ball_; }
      set {
        ball_ = value;
      }
    }

    /// <summary>Field number for the "ended" field.</summary>
    public const int EndedFieldNumber = 7;
    private bool ended_;
    /// <summary>
    /// 整场比赛是否结束了
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ended {
      get { return ended_; }
      set {
        ended_ = value;
      }
    }

    /// <summary>Field number for the "homeTeamInfo" field.</summary>
    public const int HomeTeamInfoFieldNumber = 8;
    private global::Protocols.TeamInfo homeTeamInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.TeamInfo HomeTeamInfo {
      get { return homeTeamInfo_; }
      set {
        homeTeamInfo_ = value;
      }
    }

    /// <summary>Field number for the "awayTeamInfo" field.</summary>
    public const int AwayTeamInfoFieldNumber = 9;
    private global::Protocols.TeamInfo awayTeamInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.TeamInfo AwayTeamInfo {
      get { return awayTeamInfo_; }
      set {
        awayTeamInfo_ = value;
      }
    }

    /// <summary>Field number for the "nextThreeBatterIds" field.</summary>
    public const int NextThreeBatterIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Protocols.NextBatterInfo> _repeated_nextThreeBatterIds_codec
        = pb::FieldCodec.ForMessage(82, global::Protocols.NextBatterInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocols.NextBatterInfo> nextThreeBatterIds_ = new pbc::RepeatedField<global::Protocols.NextBatterInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.NextBatterInfo> NextThreeBatterIds {
      get { return nextThreeBatterIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MatchSituation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MatchSituation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Inning != other.Inning) return false;
      if (Half != other.Half) return false;
      if (PitchCount != other.PitchCount) return false;
      if (Out != other.Out) return false;
      if (Strike != other.Strike) return false;
      if (Ball != other.Ball) return false;
      if (Ended != other.Ended) return false;
      if (!object.Equals(HomeTeamInfo, other.HomeTeamInfo)) return false;
      if (!object.Equals(AwayTeamInfo, other.AwayTeamInfo)) return false;
      if(!nextThreeBatterIds_.Equals(other.nextThreeBatterIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Inning != 0) hash ^= Inning.GetHashCode();
      if (Half != 0) hash ^= Half.GetHashCode();
      if (PitchCount != 0) hash ^= PitchCount.GetHashCode();
      if (Out != 0) hash ^= Out.GetHashCode();
      if (Strike != 0) hash ^= Strike.GetHashCode();
      if (Ball != 0) hash ^= Ball.GetHashCode();
      if (Ended != false) hash ^= Ended.GetHashCode();
      if (homeTeamInfo_ != null) hash ^= HomeTeamInfo.GetHashCode();
      if (awayTeamInfo_ != null) hash ^= AwayTeamInfo.GetHashCode();
      hash ^= nextThreeBatterIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Inning != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Inning);
      }
      if (Half != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Half);
      }
      if (PitchCount != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PitchCount);
      }
      if (Out != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Out);
      }
      if (Strike != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Strike);
      }
      if (Ball != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Ball);
      }
      if (Ended != false) {
        output.WriteRawTag(56);
        output.WriteBool(Ended);
      }
      if (homeTeamInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(HomeTeamInfo);
      }
      if (awayTeamInfo_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(AwayTeamInfo);
      }
      nextThreeBatterIds_.WriteTo(output, _repeated_nextThreeBatterIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Inning != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Inning);
      }
      if (Half != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Half);
      }
      if (PitchCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PitchCount);
      }
      if (Out != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Out);
      }
      if (Strike != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Strike);
      }
      if (Ball != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ball);
      }
      if (Ended != false) {
        size += 1 + 1;
      }
      if (homeTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HomeTeamInfo);
      }
      if (awayTeamInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AwayTeamInfo);
      }
      size += nextThreeBatterIds_.CalculateSize(_repeated_nextThreeBatterIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MatchSituation other) {
      if (other == null) {
        return;
      }
      if (other.Inning != 0) {
        Inning = other.Inning;
      }
      if (other.Half != 0) {
        Half = other.Half;
      }
      if (other.PitchCount != 0) {
        PitchCount = other.PitchCount;
      }
      if (other.Out != 0) {
        Out = other.Out;
      }
      if (other.Strike != 0) {
        Strike = other.Strike;
      }
      if (other.Ball != 0) {
        Ball = other.Ball;
      }
      if (other.Ended != false) {
        Ended = other.Ended;
      }
      if (other.homeTeamInfo_ != null) {
        if (homeTeamInfo_ == null) {
          homeTeamInfo_ = new global::Protocols.TeamInfo();
        }
        HomeTeamInfo.MergeFrom(other.HomeTeamInfo);
      }
      if (other.awayTeamInfo_ != null) {
        if (awayTeamInfo_ == null) {
          awayTeamInfo_ = new global::Protocols.TeamInfo();
        }
        AwayTeamInfo.MergeFrom(other.AwayTeamInfo);
      }
      nextThreeBatterIds_.Add(other.nextThreeBatterIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Inning = input.ReadUInt32();
            break;
          }
          case 16: {
            half_ = (global::Protocols.InningHalf) input.ReadEnum();
            break;
          }
          case 24: {
            PitchCount = input.ReadUInt32();
            break;
          }
          case 32: {
            Out = input.ReadUInt32();
            break;
          }
          case 40: {
            Strike = input.ReadUInt32();
            break;
          }
          case 48: {
            Ball = input.ReadUInt32();
            break;
          }
          case 56: {
            Ended = input.ReadBool();
            break;
          }
          case 66: {
            if (homeTeamInfo_ == null) {
              homeTeamInfo_ = new global::Protocols.TeamInfo();
            }
            input.ReadMessage(homeTeamInfo_);
            break;
          }
          case 74: {
            if (awayTeamInfo_ == null) {
              awayTeamInfo_ = new global::Protocols.TeamInfo();
            }
            input.ReadMessage(awayTeamInfo_);
            break;
          }
          case 82: {
            nextThreeBatterIds_.AddEntriesFrom(input, _repeated_nextThreeBatterIds_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class OnFieldRoleToIDMapEntry : pb::IMessage<OnFieldRoleToIDMapEntry> {
    private static readonly pb::MessageParser<OnFieldRoleToIDMapEntry> _parser = new pb::MessageParser<OnFieldRoleToIDMapEntry>(() => new OnFieldRoleToIDMapEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnFieldRoleToIDMapEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnFieldRoleToIDMapEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnFieldRoleToIDMapEntry(OnFieldRoleToIDMapEntry other) : this() {
      onFieldRole_ = other.onFieldRole_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnFieldRoleToIDMapEntry Clone() {
      return new OnFieldRoleToIDMapEntry(this);
    }

    /// <summary>Field number for the "onFieldRole" field.</summary>
    public const int OnFieldRoleFieldNumber = 1;
    private global::Protocols.OnFieldRole onFieldRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole OnFieldRole {
      get { return onFieldRole_; }
      set {
        onFieldRole_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnFieldRoleToIDMapEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnFieldRoleToIDMapEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnFieldRole != other.OnFieldRole) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnFieldRole != 0) hash ^= OnFieldRole.GetHashCode();
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnFieldRole != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OnFieldRole);
      }
      if (Id != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnFieldRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OnFieldRole);
      }
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnFieldRoleToIDMapEntry other) {
      if (other == null) {
        return;
      }
      if (other.OnFieldRole != 0) {
        OnFieldRole = other.OnFieldRole;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            onFieldRole_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class TeamInfo : pb::IMessage<TeamInfo> {
    private static readonly pb::MessageParser<TeamInfo> _parser = new pb::MessageParser<TeamInfo>(() => new TeamInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo(TeamInfo other) : this() {
      name_ = other.name_;
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      captain_ = other.captain_;
      orderOfRoles_ = other.orderOfRoles_.Clone();
      overLordEnergy_ = other.overLordEnergy_;
      homeShirtID_ = other.homeShirtID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamInfo Clone() {
      return new TeamInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 2;
    private global::Protocols.TeamStats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.TeamStats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    /// <summary>Field number for the "captain" field.</summary>
    public const int CaptainFieldNumber = 3;
    private global::Protocols.Role captain_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.Role Captain {
      get { return captain_; }
      set {
        captain_ = value;
      }
    }

    /// <summary>Field number for the "orderOfRoles" field.</summary>
    public const int OrderOfRolesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Protocols.Role> _repeated_orderOfRoles_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::Protocols.Role) x);
    private readonly pbc::RepeatedField<global::Protocols.Role> orderOfRoles_ = new pbc::RepeatedField<global::Protocols.Role>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.Role> OrderOfRoles {
      get { return orderOfRoles_; }
    }

    /// <summary>Field number for the "overLordEnergy" field.</summary>
    public const int OverLordEnergyFieldNumber = 5;
    private float overLordEnergy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OverLordEnergy {
      get { return overLordEnergy_; }
      set {
        overLordEnergy_ = value;
      }
    }

    /// <summary>Field number for the "homeShirtID" field.</summary>
    public const int HomeShirtIDFieldNumber = 6;
    private string homeShirtID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HomeShirtID {
      get { return homeShirtID_; }
      set {
        homeShirtID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      if (Captain != other.Captain) return false;
      if(!orderOfRoles_.Equals(other.orderOfRoles_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OverLordEnergy, other.OverLordEnergy)) return false;
      if (HomeShirtID != other.HomeShirtID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (Captain != 0) hash ^= Captain.GetHashCode();
      hash ^= orderOfRoles_.GetHashCode();
      if (OverLordEnergy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OverLordEnergy);
      if (HomeShirtID.Length != 0) hash ^= HomeShirtID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (stats_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Stats);
      }
      if (Captain != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Captain);
      }
      orderOfRoles_.WriteTo(output, _repeated_orderOfRoles_codec);
      if (OverLordEnergy != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(OverLordEnergy);
      }
      if (HomeShirtID.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(HomeShirtID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (Captain != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Captain);
      }
      size += orderOfRoles_.CalculateSize(_repeated_orderOfRoles_codec);
      if (OverLordEnergy != 0F) {
        size += 1 + 4;
      }
      if (HomeShirtID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HomeShirtID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          stats_ = new global::Protocols.TeamStats();
        }
        Stats.MergeFrom(other.Stats);
      }
      if (other.Captain != 0) {
        Captain = other.Captain;
      }
      orderOfRoles_.Add(other.orderOfRoles_);
      if (other.OverLordEnergy != 0F) {
        OverLordEnergy = other.OverLordEnergy;
      }
      if (other.HomeShirtID.Length != 0) {
        HomeShirtID = other.HomeShirtID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (stats_ == null) {
              stats_ = new global::Protocols.TeamStats();
            }
            input.ReadMessage(stats_);
            break;
          }
          case 24: {
            captain_ = (global::Protocols.Role) input.ReadEnum();
            break;
          }
          case 34:
          case 32: {
            orderOfRoles_.AddEntriesFrom(input, _repeated_orderOfRoles_codec);
            break;
          }
          case 45: {
            OverLordEnergy = input.ReadFloat();
            break;
          }
          case 50: {
            HomeShirtID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// 这个是在一次投打开始时就确定好的数据
  /// </summary>
  public sealed partial class PitchSituation : pb::IMessage<PitchSituation> {
    private static readonly pb::MessageParser<PitchSituation> _parser = new pb::MessageParser<PitchSituation>(() => new PitchSituation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PitchSituation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchSituation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchSituation(PitchSituation other) : this() {
      pitcherSide_ = other.pitcherSide_;
      pitcher_ = other.pitcher_;
      catcher_ = other.catcher_;
      batter_ = other.batter_;
      mode_ = other.mode_ != null ? other.mode_.Clone() : null;
      batterProf_ = other.batterProf_ != null ? other.batterProf_.Clone() : null;
      baseRunners_ = other.baseRunners_ != null ? other.baseRunners_.Clone() : null;
      field_ = other.field_ != null ? other.field_.Clone() : null;
      onFieldToID_ = other.onFieldToID_.Clone();
      initPitchTargetPositionX_ = other.initPitchTargetPositionX_;
      initPitchTargetPositionY_ = other.initPitchTargetPositionY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchSituation Clone() {
      return new PitchSituation(this);
    }

    /// <summary>Field number for the "pitcherSide" field.</summary>
    public const int PitcherSideFieldNumber = 1;
    private global::Protocols.TeamSide pitcherSide_ = 0;
    /// <summary>
    /// 哪一方在投球
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.TeamSide PitcherSide {
      get { return pitcherSide_; }
      set {
        pitcherSide_ = value;
      }
    }

    /// <summary>Field number for the "pitcher" field.</summary>
    public const int PitcherFieldNumber = 2;
    private uint pitcher_;
    /// <summary>
    /// 投手ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pitcher {
      get { return pitcher_; }
      set {
        pitcher_ = value;
      }
    }

    /// <summary>Field number for the "catcher" field.</summary>
    public const int CatcherFieldNumber = 3;
    private uint catcher_;
    /// <summary>
    /// 蹲着的人的ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Catcher {
      get { return catcher_; }
      set {
        catcher_ = value;
      }
    }

    /// <summary>Field number for the "batter" field.</summary>
    public const int BatterFieldNumber = 4;
    private uint batter_;
    /// <summary>
    /// 打手ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Batter {
      get { return batter_; }
      set {
        batter_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 5;
    private global::Protocols.PitchMode mode_;
    /// <summary>
    /// 主宰时刻/强击、短打之类的状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.PitchMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "batterProf" field.</summary>
    public const int BatterProfFieldNumber = 6;
    private global::Protocols.BatterProficiency batterProf_;
    /// <summary>
    /// 打手擅长区块。投手在选目标时显示的红/蓝块。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BatterProficiency BatterProf {
      get { return batterProf_; }
      set {
        batterProf_ = value;
      }
    }

    /// <summary>Field number for the "baseRunners" field.</summary>
    public const int BaseRunnersFieldNumber = 7;
    private global::Protocols.BaseRunners baseRunners_;
    /// <summary>
    /// 跑垒者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BaseRunners BaseRunners {
      get { return baseRunners_; }
      set {
        baseRunners_ = value;
      }
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 8;
    private global::Protocols.FieldSituation field_;
    /// <summary>
    /// 野区状态
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.FieldSituation Field {
      get { return field_; }
      set {
        field_ = value;
      }
    }

    /// <summary>Field number for the "onFieldToID" field.</summary>
    public const int OnFieldToIDFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Protocols.OnFieldRoleToIDMapEntry> _repeated_onFieldToID_codec
        = pb::FieldCodec.ForMessage(74, global::Protocols.OnFieldRoleToIDMapEntry.Parser);
    private readonly pbc::RepeatedField<global::Protocols.OnFieldRoleToIDMapEntry> onFieldToID_ = new pbc::RepeatedField<global::Protocols.OnFieldRoleToIDMapEntry>();
    /// <summary>
    /// 场上指责对player id的对应关系
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.OnFieldRoleToIDMapEntry> OnFieldToID {
      get { return onFieldToID_; }
    }

    /// <summary>Field number for the "initPitchTargetPositionX" field.</summary>
    public const int InitPitchTargetPositionXFieldNumber = 10;
    private float initPitchTargetPositionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitPitchTargetPositionX {
      get { return initPitchTargetPositionX_; }
      set {
        initPitchTargetPositionX_ = value;
      }
    }

    /// <summary>Field number for the "initPitchTargetPositionY" field.</summary>
    public const int InitPitchTargetPositionYFieldNumber = 11;
    private float initPitchTargetPositionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float InitPitchTargetPositionY {
      get { return initPitchTargetPositionY_; }
      set {
        initPitchTargetPositionY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PitchSituation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PitchSituation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PitcherSide != other.PitcherSide) return false;
      if (Pitcher != other.Pitcher) return false;
      if (Catcher != other.Catcher) return false;
      if (Batter != other.Batter) return false;
      if (!object.Equals(Mode, other.Mode)) return false;
      if (!object.Equals(BatterProf, other.BatterProf)) return false;
      if (!object.Equals(BaseRunners, other.BaseRunners)) return false;
      if (!object.Equals(Field, other.Field)) return false;
      if(!onFieldToID_.Equals(other.onFieldToID_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitPitchTargetPositionX, other.InitPitchTargetPositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InitPitchTargetPositionY, other.InitPitchTargetPositionY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PitcherSide != 0) hash ^= PitcherSide.GetHashCode();
      if (Pitcher != 0) hash ^= Pitcher.GetHashCode();
      if (Catcher != 0) hash ^= Catcher.GetHashCode();
      if (Batter != 0) hash ^= Batter.GetHashCode();
      if (mode_ != null) hash ^= Mode.GetHashCode();
      if (batterProf_ != null) hash ^= BatterProf.GetHashCode();
      if (baseRunners_ != null) hash ^= BaseRunners.GetHashCode();
      if (field_ != null) hash ^= Field.GetHashCode();
      hash ^= onFieldToID_.GetHashCode();
      if (InitPitchTargetPositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitPitchTargetPositionX);
      if (InitPitchTargetPositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InitPitchTargetPositionY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PitcherSide != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PitcherSide);
      }
      if (Pitcher != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Pitcher);
      }
      if (Catcher != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Catcher);
      }
      if (Batter != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Batter);
      }
      if (mode_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Mode);
      }
      if (batterProf_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BatterProf);
      }
      if (baseRunners_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BaseRunners);
      }
      if (field_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Field);
      }
      onFieldToID_.WriteTo(output, _repeated_onFieldToID_codec);
      if (InitPitchTargetPositionX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(InitPitchTargetPositionX);
      }
      if (InitPitchTargetPositionY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(InitPitchTargetPositionY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PitcherSide != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PitcherSide);
      }
      if (Pitcher != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pitcher);
      }
      if (Catcher != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Catcher);
      }
      if (Batter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Batter);
      }
      if (mode_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Mode);
      }
      if (batterProf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BatterProf);
      }
      if (baseRunners_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BaseRunners);
      }
      if (field_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Field);
      }
      size += onFieldToID_.CalculateSize(_repeated_onFieldToID_codec);
      if (InitPitchTargetPositionX != 0F) {
        size += 1 + 4;
      }
      if (InitPitchTargetPositionY != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PitchSituation other) {
      if (other == null) {
        return;
      }
      if (other.PitcherSide != 0) {
        PitcherSide = other.PitcherSide;
      }
      if (other.Pitcher != 0) {
        Pitcher = other.Pitcher;
      }
      if (other.Catcher != 0) {
        Catcher = other.Catcher;
      }
      if (other.Batter != 0) {
        Batter = other.Batter;
      }
      if (other.mode_ != null) {
        if (mode_ == null) {
          mode_ = new global::Protocols.PitchMode();
        }
        Mode.MergeFrom(other.Mode);
      }
      if (other.batterProf_ != null) {
        if (batterProf_ == null) {
          batterProf_ = new global::Protocols.BatterProficiency();
        }
        BatterProf.MergeFrom(other.BatterProf);
      }
      if (other.baseRunners_ != null) {
        if (baseRunners_ == null) {
          baseRunners_ = new global::Protocols.BaseRunners();
        }
        BaseRunners.MergeFrom(other.BaseRunners);
      }
      if (other.field_ != null) {
        if (field_ == null) {
          field_ = new global::Protocols.FieldSituation();
        }
        Field.MergeFrom(other.Field);
      }
      onFieldToID_.Add(other.onFieldToID_);
      if (other.InitPitchTargetPositionX != 0F) {
        InitPitchTargetPositionX = other.InitPitchTargetPositionX;
      }
      if (other.InitPitchTargetPositionY != 0F) {
        InitPitchTargetPositionY = other.InitPitchTargetPositionY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pitcherSide_ = (global::Protocols.TeamSide) input.ReadEnum();
            break;
          }
          case 16: {
            Pitcher = input.ReadUInt32();
            break;
          }
          case 24: {
            Catcher = input.ReadUInt32();
            break;
          }
          case 32: {
            Batter = input.ReadUInt32();
            break;
          }
          case 42: {
            if (mode_ == null) {
              mode_ = new global::Protocols.PitchMode();
            }
            input.ReadMessage(mode_);
            break;
          }
          case 50: {
            if (batterProf_ == null) {
              batterProf_ = new global::Protocols.BatterProficiency();
            }
            input.ReadMessage(batterProf_);
            break;
          }
          case 58: {
            if (baseRunners_ == null) {
              baseRunners_ = new global::Protocols.BaseRunners();
            }
            input.ReadMessage(baseRunners_);
            break;
          }
          case 66: {
            if (field_ == null) {
              field_ = new global::Protocols.FieldSituation();
            }
            input.ReadMessage(field_);
            break;
          }
          case 74: {
            onFieldToID_.AddEntriesFrom(input, _repeated_onFieldToID_codec);
            break;
          }
          case 85: {
            InitPitchTargetPositionX = input.ReadFloat();
            break;
          }
          case 93: {
            InitPitchTargetPositionY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// 场上球员的状态（buff,debuff等）
  /// 除了这里其他地方应当只引用球员的ID。球员的原始数据未设计，期望在这个系统之外就决定了。这里是球员的当前数据，是随时变的。
  /// </summary>
  public sealed partial class PlayerSituation : pb::IMessage<PlayerSituation> {
    private static readonly pb::MessageParser<PlayerSituation> _parser = new pb::MessageParser<PlayerSituation>(() => new PlayerSituation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSituation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSituation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSituation(PlayerSituation other) : this() {
      homeTeam_ = other.homeTeam_.Clone();
      awayTeam_ = other.awayTeam_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSituation Clone() {
      return new PlayerSituation(this);
    }

    /// <summary>Field number for the "homeTeam" field.</summary>
    public const int HomeTeamFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Protocols.PlayerInfo> _repeated_homeTeam_codec
        = pb::FieldCodec.ForMessage(10, global::Protocols.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocols.PlayerInfo> homeTeam_ = new pbc::RepeatedField<global::Protocols.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.PlayerInfo> HomeTeam {
      get { return homeTeam_; }
    }

    /// <summary>Field number for the "awayTeam" field.</summary>
    public const int AwayTeamFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocols.PlayerInfo> _repeated_awayTeam_codec
        = pb::FieldCodec.ForMessage(18, global::Protocols.PlayerInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocols.PlayerInfo> awayTeam_ = new pbc::RepeatedField<global::Protocols.PlayerInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.PlayerInfo> AwayTeam {
      get { return awayTeam_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSituation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSituation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!homeTeam_.Equals(other.homeTeam_)) return false;
      if(!awayTeam_.Equals(other.awayTeam_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= homeTeam_.GetHashCode();
      hash ^= awayTeam_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      homeTeam_.WriteTo(output, _repeated_homeTeam_codec);
      awayTeam_.WriteTo(output, _repeated_awayTeam_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += homeTeam_.CalculateSize(_repeated_homeTeam_codec);
      size += awayTeam_.CalculateSize(_repeated_awayTeam_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSituation other) {
      if (other == null) {
        return;
      }
      homeTeam_.Add(other.homeTeam_);
      awayTeam_.Add(other.awayTeam_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            homeTeam_.AddEntriesFrom(input, _repeated_homeTeam_codec);
            break;
          }
          case 18: {
            awayTeam_.AddEntriesFrom(input, _repeated_awayTeam_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class PlayerInfo : pb::IMessage<PlayerInfo> {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => new PlayerInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo(PlayerInfo other) : this() {
      id_ = other.id_;
      abilities_ = other.abilities_ != null ? other.abilities_.Clone() : null;
      adeptRoles_ = other.adeptRoles_.Clone();
      stats_ = other.stats_ != null ? other.stats_.Clone() : null;
      cid_ = other.cid_;
      kitName_ = other.kitName_;
      number_ = other.number_;
      power_ = other.power_;
      role_ = other.role_;
      onFieldRole_ = other.onFieldRole_;
      pitchHand_ = other.pitchHand_;
      pitchTypes_ = other.pitchTypes_.Clone();
      battingHand_ = other.battingHand_;
      battingProficiency_ = other.battingProficiency_ != null ? other.battingProficiency_.Clone() : null;
      dominateTypes_ = other.dominateTypes_.Clone();
      plateAppearance_ = other.plateAppearance_;
      atBats_ = other.atBats_;
      runs_ = other.runs_;
      hits_ = other.hits_;
      errors_ = other.errors_;
      homeRuns_ = other.homeRuns_;
      pitchCount_ = other.pitchCount_;
      leftEnergyPercentage_ = other.leftEnergyPercentage_;
      positionX_ = other.positionX_;
      positionY_ = other.positionY_;
      rotationX_ = other.rotationX_;
      rotationY_ = other.rotationY_;
      rotationZ_ = other.rotationZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerInfo Clone() {
      return new PlayerInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 2;
    private global::Protocols.PlayerAbilities abilities_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.PlayerAbilities Abilities {
      get { return abilities_; }
      set {
        abilities_ = value;
      }
    }

    /// <summary>Field number for the "adeptRoles" field.</summary>
    public const int AdeptRolesFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_adeptRoles_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> adeptRoles_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> AdeptRoles {
      get { return adeptRoles_; }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 4;
    private global::Protocols.PlayerSeasonStats stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.PlayerSeasonStats Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    /// <summary>Field number for the "cid" field.</summary>
    public const int CidFieldNumber = 5;
    private string cid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cid {
      get { return cid_; }
      set {
        cid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "kitName" field.</summary>
    public const int KitNameFieldNumber = 6;
    private string kitName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KitName {
      get { return kitName_; }
      set {
        kitName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 7;
    private string number_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Number {
      get { return number_; }
      set {
        number_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 8;
    private float power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 9;
    private global::Protocols.Role role_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.Role Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "onFieldRole" field.</summary>
    public const int OnFieldRoleFieldNumber = 10;
    private global::Protocols.OnFieldRole onFieldRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole OnFieldRole {
      get { return onFieldRole_; }
      set {
        onFieldRole_ = value;
      }
    }

    /// <summary>Field number for the "pitchHand" field.</summary>
    public const int PitchHandFieldNumber = 11;
    private global::Protocols.HandType pitchHand_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.HandType PitchHand {
      get { return pitchHand_; }
      set {
        pitchHand_ = value;
      }
    }

    /// <summary>Field number for the "pitchTypes" field.</summary>
    public const int PitchTypesFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Protocols.PitchTypeInfo> _repeated_pitchTypes_codec
        = pb::FieldCodec.ForMessage(98, global::Protocols.PitchTypeInfo.Parser);
    private readonly pbc::RepeatedField<global::Protocols.PitchTypeInfo> pitchTypes_ = new pbc::RepeatedField<global::Protocols.PitchTypeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.PitchTypeInfo> PitchTypes {
      get { return pitchTypes_; }
    }

    /// <summary>Field number for the "battingHand" field.</summary>
    public const int BattingHandFieldNumber = 13;
    private global::Protocols.HandType battingHand_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.HandType BattingHand {
      get { return battingHand_; }
      set {
        battingHand_ = value;
      }
    }

    /// <summary>Field number for the "battingProficiency" field.</summary>
    public const int BattingProficiencyFieldNumber = 14;
    private global::Protocols.BattingProficiency battingProficiency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BattingProficiency BattingProficiency {
      get { return battingProficiency_; }
      set {
        battingProficiency_ = value;
      }
    }

    /// <summary>Field number for the "dominateTypes" field.</summary>
    public const int DominateTypesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Protocols.DominateType> _repeated_dominateTypes_codec
        = pb::FieldCodec.ForEnum(122, x => (int) x, x => (global::Protocols.DominateType) x);
    private readonly pbc::RepeatedField<global::Protocols.DominateType> dominateTypes_ = new pbc::RepeatedField<global::Protocols.DominateType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.DominateType> DominateTypes {
      get { return dominateTypes_; }
    }

    /// <summary>Field number for the "plateAppearance" field.</summary>
    public const int PlateAppearanceFieldNumber = 16;
    private uint plateAppearance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PlateAppearance {
      get { return plateAppearance_; }
      set {
        plateAppearance_ = value;
      }
    }

    /// <summary>Field number for the "atBats" field.</summary>
    public const int AtBatsFieldNumber = 17;
    private uint atBats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtBats {
      get { return atBats_; }
      set {
        atBats_ = value;
      }
    }

    /// <summary>Field number for the "runs" field.</summary>
    public const int RunsFieldNumber = 18;
    private uint runs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Runs {
      get { return runs_; }
      set {
        runs_ = value;
      }
    }

    /// <summary>Field number for the "hits" field.</summary>
    public const int HitsFieldNumber = 19;
    private uint hits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hits {
      get { return hits_; }
      set {
        hits_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 20;
    private uint errors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Errors {
      get { return errors_; }
      set {
        errors_ = value;
      }
    }

    /// <summary>Field number for the "homeRuns" field.</summary>
    public const int HomeRunsFieldNumber = 21;
    private uint homeRuns_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HomeRuns {
      get { return homeRuns_; }
      set {
        homeRuns_ = value;
      }
    }

    /// <summary>Field number for the "pitchCount" field.</summary>
    public const int PitchCountFieldNumber = 22;
    private uint pitchCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PitchCount {
      get { return pitchCount_; }
      set {
        pitchCount_ = value;
      }
    }

    /// <summary>Field number for the "leftEnergyPercentage" field.</summary>
    public const int LeftEnergyPercentageFieldNumber = 23;
    private float leftEnergyPercentage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftEnergyPercentage {
      get { return leftEnergyPercentage_; }
      set {
        leftEnergyPercentage_ = value;
      }
    }

    /// <summary>Field number for the "positionX" field.</summary>
    public const int PositionXFieldNumber = 24;
    private float positionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionX {
      get { return positionX_; }
      set {
        positionX_ = value;
      }
    }

    /// <summary>Field number for the "positionY" field.</summary>
    public const int PositionYFieldNumber = 25;
    private float positionY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PositionY {
      get { return positionY_; }
      set {
        positionY_ = value;
      }
    }

    /// <summary>Field number for the "rotationX" field.</summary>
    public const int RotationXFieldNumber = 26;
    private float rotationX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationX {
      get { return rotationX_; }
      set {
        rotationX_ = value;
      }
    }

    /// <summary>Field number for the "rotationY" field.</summary>
    public const int RotationYFieldNumber = 27;
    private float rotationY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationY {
      get { return rotationY_; }
      set {
        rotationY_ = value;
      }
    }

    /// <summary>Field number for the "rotationZ" field.</summary>
    public const int RotationZFieldNumber = 28;
    private float rotationZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RotationZ {
      get { return rotationZ_; }
      set {
        rotationZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Abilities, other.Abilities)) return false;
      if(!adeptRoles_.Equals(other.adeptRoles_)) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      if (Cid != other.Cid) return false;
      if (KitName != other.KitName) return false;
      if (Number != other.Number) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Power, other.Power)) return false;
      if (Role != other.Role) return false;
      if (OnFieldRole != other.OnFieldRole) return false;
      if (PitchHand != other.PitchHand) return false;
      if(!pitchTypes_.Equals(other.pitchTypes_)) return false;
      if (BattingHand != other.BattingHand) return false;
      if (!object.Equals(BattingProficiency, other.BattingProficiency)) return false;
      if(!dominateTypes_.Equals(other.dominateTypes_)) return false;
      if (PlateAppearance != other.PlateAppearance) return false;
      if (AtBats != other.AtBats) return false;
      if (Runs != other.Runs) return false;
      if (Hits != other.Hits) return false;
      if (Errors != other.Errors) return false;
      if (HomeRuns != other.HomeRuns) return false;
      if (PitchCount != other.PitchCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftEnergyPercentage, other.LeftEnergyPercentage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionX, other.PositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PositionY, other.PositionY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationX, other.RotationX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationY, other.RotationY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationZ, other.RotationZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (abilities_ != null) hash ^= Abilities.GetHashCode();
      hash ^= adeptRoles_.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      if (Cid.Length != 0) hash ^= Cid.GetHashCode();
      if (KitName.Length != 0) hash ^= KitName.GetHashCode();
      if (Number.Length != 0) hash ^= Number.GetHashCode();
      if (Power != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Power);
      if (Role != 0) hash ^= Role.GetHashCode();
      if (OnFieldRole != 0) hash ^= OnFieldRole.GetHashCode();
      if (PitchHand != 0) hash ^= PitchHand.GetHashCode();
      hash ^= pitchTypes_.GetHashCode();
      if (BattingHand != 0) hash ^= BattingHand.GetHashCode();
      if (battingProficiency_ != null) hash ^= BattingProficiency.GetHashCode();
      hash ^= dominateTypes_.GetHashCode();
      if (PlateAppearance != 0) hash ^= PlateAppearance.GetHashCode();
      if (AtBats != 0) hash ^= AtBats.GetHashCode();
      if (Runs != 0) hash ^= Runs.GetHashCode();
      if (Hits != 0) hash ^= Hits.GetHashCode();
      if (Errors != 0) hash ^= Errors.GetHashCode();
      if (HomeRuns != 0) hash ^= HomeRuns.GetHashCode();
      if (PitchCount != 0) hash ^= PitchCount.GetHashCode();
      if (LeftEnergyPercentage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftEnergyPercentage);
      if (PositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionX);
      if (PositionY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PositionY);
      if (RotationX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationX);
      if (RotationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationY);
      if (RotationZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (abilities_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Abilities);
      }
      adeptRoles_.WriteTo(output, _repeated_adeptRoles_codec);
      if (stats_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Stats);
      }
      if (Cid.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Cid);
      }
      if (KitName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(KitName);
      }
      if (Number.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Number);
      }
      if (Power != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Power);
      }
      if (Role != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Role);
      }
      if (OnFieldRole != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) OnFieldRole);
      }
      if (PitchHand != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) PitchHand);
      }
      pitchTypes_.WriteTo(output, _repeated_pitchTypes_codec);
      if (BattingHand != 0) {
        output.WriteRawTag(104);
        output.WriteEnum((int) BattingHand);
      }
      if (battingProficiency_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(BattingProficiency);
      }
      dominateTypes_.WriteTo(output, _repeated_dominateTypes_codec);
      if (PlateAppearance != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(PlateAppearance);
      }
      if (AtBats != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(AtBats);
      }
      if (Runs != 0) {
        output.WriteRawTag(144, 1);
        output.WriteUInt32(Runs);
      }
      if (Hits != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Hits);
      }
      if (Errors != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Errors);
      }
      if (HomeRuns != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(HomeRuns);
      }
      if (PitchCount != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(PitchCount);
      }
      if (LeftEnergyPercentage != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(LeftEnergyPercentage);
      }
      if (PositionX != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(PositionX);
      }
      if (PositionY != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(PositionY);
      }
      if (RotationX != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(RotationX);
      }
      if (RotationY != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(RotationY);
      }
      if (RotationZ != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(RotationZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (abilities_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abilities);
      }
      size += adeptRoles_.CalculateSize(_repeated_adeptRoles_codec);
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      if (Cid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cid);
      }
      if (KitName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(KitName);
      }
      if (Number.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Number);
      }
      if (Power != 0F) {
        size += 1 + 4;
      }
      if (Role != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (OnFieldRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OnFieldRole);
      }
      if (PitchHand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PitchHand);
      }
      size += pitchTypes_.CalculateSize(_repeated_pitchTypes_codec);
      if (BattingHand != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattingHand);
      }
      if (battingProficiency_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BattingProficiency);
      }
      size += dominateTypes_.CalculateSize(_repeated_dominateTypes_codec);
      if (PlateAppearance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PlateAppearance);
      }
      if (AtBats != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtBats);
      }
      if (Runs != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Runs);
      }
      if (Hits != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Hits);
      }
      if (Errors != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Errors);
      }
      if (HomeRuns != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(HomeRuns);
      }
      if (PitchCount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PitchCount);
      }
      if (LeftEnergyPercentage != 0F) {
        size += 2 + 4;
      }
      if (PositionX != 0F) {
        size += 2 + 4;
      }
      if (PositionY != 0F) {
        size += 2 + 4;
      }
      if (RotationX != 0F) {
        size += 2 + 4;
      }
      if (RotationY != 0F) {
        size += 2 + 4;
      }
      if (RotationZ != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.abilities_ != null) {
        if (abilities_ == null) {
          abilities_ = new global::Protocols.PlayerAbilities();
        }
        Abilities.MergeFrom(other.Abilities);
      }
      adeptRoles_.Add(other.adeptRoles_);
      if (other.stats_ != null) {
        if (stats_ == null) {
          stats_ = new global::Protocols.PlayerSeasonStats();
        }
        Stats.MergeFrom(other.Stats);
      }
      if (other.Cid.Length != 0) {
        Cid = other.Cid;
      }
      if (other.KitName.Length != 0) {
        KitName = other.KitName;
      }
      if (other.Number.Length != 0) {
        Number = other.Number;
      }
      if (other.Power != 0F) {
        Power = other.Power;
      }
      if (other.Role != 0) {
        Role = other.Role;
      }
      if (other.OnFieldRole != 0) {
        OnFieldRole = other.OnFieldRole;
      }
      if (other.PitchHand != 0) {
        PitchHand = other.PitchHand;
      }
      pitchTypes_.Add(other.pitchTypes_);
      if (other.BattingHand != 0) {
        BattingHand = other.BattingHand;
      }
      if (other.battingProficiency_ != null) {
        if (battingProficiency_ == null) {
          battingProficiency_ = new global::Protocols.BattingProficiency();
        }
        BattingProficiency.MergeFrom(other.BattingProficiency);
      }
      dominateTypes_.Add(other.dominateTypes_);
      if (other.PlateAppearance != 0) {
        PlateAppearance = other.PlateAppearance;
      }
      if (other.AtBats != 0) {
        AtBats = other.AtBats;
      }
      if (other.Runs != 0) {
        Runs = other.Runs;
      }
      if (other.Hits != 0) {
        Hits = other.Hits;
      }
      if (other.Errors != 0) {
        Errors = other.Errors;
      }
      if (other.HomeRuns != 0) {
        HomeRuns = other.HomeRuns;
      }
      if (other.PitchCount != 0) {
        PitchCount = other.PitchCount;
      }
      if (other.LeftEnergyPercentage != 0F) {
        LeftEnergyPercentage = other.LeftEnergyPercentage;
      }
      if (other.PositionX != 0F) {
        PositionX = other.PositionX;
      }
      if (other.PositionY != 0F) {
        PositionY = other.PositionY;
      }
      if (other.RotationX != 0F) {
        RotationX = other.RotationX;
      }
      if (other.RotationY != 0F) {
        RotationY = other.RotationY;
      }
      if (other.RotationZ != 0F) {
        RotationZ = other.RotationZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            if (abilities_ == null) {
              abilities_ = new global::Protocols.PlayerAbilities();
            }
            input.ReadMessage(abilities_);
            break;
          }
          case 26:
          case 24: {
            adeptRoles_.AddEntriesFrom(input, _repeated_adeptRoles_codec);
            break;
          }
          case 34: {
            if (stats_ == null) {
              stats_ = new global::Protocols.PlayerSeasonStats();
            }
            input.ReadMessage(stats_);
            break;
          }
          case 42: {
            Cid = input.ReadString();
            break;
          }
          case 50: {
            KitName = input.ReadString();
            break;
          }
          case 58: {
            Number = input.ReadString();
            break;
          }
          case 69: {
            Power = input.ReadFloat();
            break;
          }
          case 72: {
            role_ = (global::Protocols.Role) input.ReadEnum();
            break;
          }
          case 80: {
            onFieldRole_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
          case 88: {
            pitchHand_ = (global::Protocols.HandType) input.ReadEnum();
            break;
          }
          case 98: {
            pitchTypes_.AddEntriesFrom(input, _repeated_pitchTypes_codec);
            break;
          }
          case 104: {
            battingHand_ = (global::Protocols.HandType) input.ReadEnum();
            break;
          }
          case 114: {
            if (battingProficiency_ == null) {
              battingProficiency_ = new global::Protocols.BattingProficiency();
            }
            input.ReadMessage(battingProficiency_);
            break;
          }
          case 122:
          case 120: {
            dominateTypes_.AddEntriesFrom(input, _repeated_dominateTypes_codec);
            break;
          }
          case 128: {
            PlateAppearance = input.ReadUInt32();
            break;
          }
          case 136: {
            AtBats = input.ReadUInt32();
            break;
          }
          case 144: {
            Runs = input.ReadUInt32();
            break;
          }
          case 152: {
            Hits = input.ReadUInt32();
            break;
          }
          case 160: {
            Errors = input.ReadUInt32();
            break;
          }
          case 168: {
            HomeRuns = input.ReadUInt32();
            break;
          }
          case 176: {
            PitchCount = input.ReadUInt32();
            break;
          }
          case 189: {
            LeftEnergyPercentage = input.ReadFloat();
            break;
          }
          case 197: {
            PositionX = input.ReadFloat();
            break;
          }
          case 205: {
            PositionY = input.ReadFloat();
            break;
          }
          case 213: {
            RotationX = input.ReadFloat();
            break;
          }
          case 221: {
            RotationY = input.ReadFloat();
            break;
          }
          case 229: {
            RotationZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class PlayerAbilities : pb::IMessage<PlayerAbilities> {
    private static readonly pb::MessageParser<PlayerAbilities> _parser = new pb::MessageParser<PlayerAbilities>(() => new PlayerAbilities());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerAbilities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAbilities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAbilities(PlayerAbilities other) : this() {
      contact_ = other.contact_;
      slugging_ = other.slugging_;
      baseRunning_ = other.baseRunning_;
      fielding_ = other.fielding_;
      plateDispline_ = other.plateDispline_;
      stamina_ = other.stamina_;
      control_ = other.control_;
      breaking_ = other.breaking_;
      explosiveness_ = other.explosiveness_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerAbilities Clone() {
      return new PlayerAbilities(this);
    }

    /// <summary>Field number for the "contact" field.</summary>
    public const int ContactFieldNumber = 1;
    private float contact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Contact {
      get { return contact_; }
      set {
        contact_ = value;
      }
    }

    /// <summary>Field number for the "slugging" field.</summary>
    public const int SluggingFieldNumber = 2;
    private float slugging_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Slugging {
      get { return slugging_; }
      set {
        slugging_ = value;
      }
    }

    /// <summary>Field number for the "baseRunning" field.</summary>
    public const int BaseRunningFieldNumber = 3;
    private float baseRunning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseRunning {
      get { return baseRunning_; }
      set {
        baseRunning_ = value;
      }
    }

    /// <summary>Field number for the "fielding" field.</summary>
    public const int FieldingFieldNumber = 4;
    private float fielding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Fielding {
      get { return fielding_; }
      set {
        fielding_ = value;
      }
    }

    /// <summary>Field number for the "plateDispline" field.</summary>
    public const int PlateDisplineFieldNumber = 5;
    private float plateDispline_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PlateDispline {
      get { return plateDispline_; }
      set {
        plateDispline_ = value;
      }
    }

    /// <summary>Field number for the "stamina" field.</summary>
    public const int StaminaFieldNumber = 6;
    private float stamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "control" field.</summary>
    public const int ControlFieldNumber = 7;
    private float control_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Control {
      get { return control_; }
      set {
        control_ = value;
      }
    }

    /// <summary>Field number for the "breaking" field.</summary>
    public const int BreakingFieldNumber = 8;
    private float breaking_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Breaking {
      get { return breaking_; }
      set {
        breaking_ = value;
      }
    }

    /// <summary>Field number for the "explosiveness" field.</summary>
    public const int ExplosivenessFieldNumber = 9;
    private float explosiveness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Explosiveness {
      get { return explosiveness_; }
      set {
        explosiveness_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerAbilities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerAbilities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Contact, other.Contact)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Slugging, other.Slugging)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseRunning, other.BaseRunning)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Fielding, other.Fielding)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PlateDispline, other.PlateDispline)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Stamina, other.Stamina)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Control, other.Control)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Breaking, other.Breaking)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Explosiveness, other.Explosiveness)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Contact != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Contact);
      if (Slugging != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Slugging);
      if (BaseRunning != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseRunning);
      if (Fielding != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Fielding);
      if (PlateDispline != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PlateDispline);
      if (Stamina != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Stamina);
      if (Control != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Control);
      if (Breaking != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Breaking);
      if (Explosiveness != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Explosiveness);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Contact != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Contact);
      }
      if (Slugging != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Slugging);
      }
      if (BaseRunning != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BaseRunning);
      }
      if (Fielding != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Fielding);
      }
      if (PlateDispline != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PlateDispline);
      }
      if (Stamina != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Stamina);
      }
      if (Control != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Control);
      }
      if (Breaking != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Breaking);
      }
      if (Explosiveness != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Explosiveness);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Contact != 0F) {
        size += 1 + 4;
      }
      if (Slugging != 0F) {
        size += 1 + 4;
      }
      if (BaseRunning != 0F) {
        size += 1 + 4;
      }
      if (Fielding != 0F) {
        size += 1 + 4;
      }
      if (PlateDispline != 0F) {
        size += 1 + 4;
      }
      if (Stamina != 0F) {
        size += 1 + 4;
      }
      if (Control != 0F) {
        size += 1 + 4;
      }
      if (Breaking != 0F) {
        size += 1 + 4;
      }
      if (Explosiveness != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerAbilities other) {
      if (other == null) {
        return;
      }
      if (other.Contact != 0F) {
        Contact = other.Contact;
      }
      if (other.Slugging != 0F) {
        Slugging = other.Slugging;
      }
      if (other.BaseRunning != 0F) {
        BaseRunning = other.BaseRunning;
      }
      if (other.Fielding != 0F) {
        Fielding = other.Fielding;
      }
      if (other.PlateDispline != 0F) {
        PlateDispline = other.PlateDispline;
      }
      if (other.Stamina != 0F) {
        Stamina = other.Stamina;
      }
      if (other.Control != 0F) {
        Control = other.Control;
      }
      if (other.Breaking != 0F) {
        Breaking = other.Breaking;
      }
      if (other.Explosiveness != 0F) {
        Explosiveness = other.Explosiveness;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Contact = input.ReadFloat();
            break;
          }
          case 21: {
            Slugging = input.ReadFloat();
            break;
          }
          case 29: {
            BaseRunning = input.ReadFloat();
            break;
          }
          case 37: {
            Fielding = input.ReadFloat();
            break;
          }
          case 45: {
            PlateDispline = input.ReadFloat();
            break;
          }
          case 53: {
            Stamina = input.ReadFloat();
            break;
          }
          case 61: {
            Control = input.ReadFloat();
            break;
          }
          case 69: {
            Breaking = input.ReadFloat();
            break;
          }
          case 77: {
            Explosiveness = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class PlayerSeasonStats : pb::IMessage<PlayerSeasonStats> {
    private static readonly pb::MessageParser<PlayerSeasonStats> _parser = new pb::MessageParser<PlayerSeasonStats>(() => new PlayerSeasonStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSeasonStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSeasonStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSeasonStats(PlayerSeasonStats other) : this() {
      avg_ = other.avg_;
      hr_ = other.hr_;
      rbi_ = other.rbi_;
      sb_ = other.sb_;
      win_ = other.win_;
      lose_ = other.lose_;
      era_ = other.era_;
      games_ = other.games_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSeasonStats Clone() {
      return new PlayerSeasonStats(this);
    }

    /// <summary>Field number for the "avg" field.</summary>
    public const int AvgFieldNumber = 1;
    private float avg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Avg {
      get { return avg_; }
      set {
        avg_ = value;
      }
    }

    /// <summary>Field number for the "hr" field.</summary>
    public const int HrFieldNumber = 2;
    private float hr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Hr {
      get { return hr_; }
      set {
        hr_ = value;
      }
    }

    /// <summary>Field number for the "rbi" field.</summary>
    public const int RbiFieldNumber = 3;
    private float rbi_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rbi {
      get { return rbi_; }
      set {
        rbi_ = value;
      }
    }

    /// <summary>Field number for the "sb" field.</summary>
    public const int SbFieldNumber = 4;
    private float sb_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Sb {
      get { return sb_; }
      set {
        sb_ = value;
      }
    }

    /// <summary>Field number for the "win" field.</summary>
    public const int WinFieldNumber = 5;
    private float win_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Win {
      get { return win_; }
      set {
        win_ = value;
      }
    }

    /// <summary>Field number for the "lose" field.</summary>
    public const int LoseFieldNumber = 6;
    private float lose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Lose {
      get { return lose_; }
      set {
        lose_ = value;
      }
    }

    /// <summary>Field number for the "era" field.</summary>
    public const int EraFieldNumber = 7;
    private float era_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Era {
      get { return era_; }
      set {
        era_ = value;
      }
    }

    /// <summary>Field number for the "games" field.</summary>
    public const int GamesFieldNumber = 8;
    private uint games_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Games {
      get { return games_; }
      set {
        games_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSeasonStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSeasonStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Avg, other.Avg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Hr, other.Hr)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rbi, other.Rbi)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Sb, other.Sb)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Win, other.Win)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Lose, other.Lose)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Era, other.Era)) return false;
      if (Games != other.Games) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Avg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Avg);
      if (Hr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Hr);
      if (Rbi != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rbi);
      if (Sb != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Sb);
      if (Win != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Win);
      if (Lose != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Lose);
      if (Era != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Era);
      if (Games != 0) hash ^= Games.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Avg != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Avg);
      }
      if (Hr != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Hr);
      }
      if (Rbi != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Rbi);
      }
      if (Sb != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Sb);
      }
      if (Win != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Win);
      }
      if (Lose != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Lose);
      }
      if (Era != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Era);
      }
      if (Games != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Games);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Avg != 0F) {
        size += 1 + 4;
      }
      if (Hr != 0F) {
        size += 1 + 4;
      }
      if (Rbi != 0F) {
        size += 1 + 4;
      }
      if (Sb != 0F) {
        size += 1 + 4;
      }
      if (Win != 0F) {
        size += 1 + 4;
      }
      if (Lose != 0F) {
        size += 1 + 4;
      }
      if (Era != 0F) {
        size += 1 + 4;
      }
      if (Games != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Games);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSeasonStats other) {
      if (other == null) {
        return;
      }
      if (other.Avg != 0F) {
        Avg = other.Avg;
      }
      if (other.Hr != 0F) {
        Hr = other.Hr;
      }
      if (other.Rbi != 0F) {
        Rbi = other.Rbi;
      }
      if (other.Sb != 0F) {
        Sb = other.Sb;
      }
      if (other.Win != 0F) {
        Win = other.Win;
      }
      if (other.Lose != 0F) {
        Lose = other.Lose;
      }
      if (other.Era != 0F) {
        Era = other.Era;
      }
      if (other.Games != 0) {
        Games = other.Games;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Avg = input.ReadFloat();
            break;
          }
          case 21: {
            Hr = input.ReadFloat();
            break;
          }
          case 29: {
            Rbi = input.ReadFloat();
            break;
          }
          case 37: {
            Sb = input.ReadFloat();
            break;
          }
          case 45: {
            Win = input.ReadFloat();
            break;
          }
          case 53: {
            Lose = input.ReadFloat();
            break;
          }
          case 61: {
            Era = input.ReadFloat();
            break;
          }
          case 64: {
            Games = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class PitchTypeInfo : pb::IMessage<PitchTypeInfo> {
    private static readonly pb::MessageParser<PitchTypeInfo> _parser = new pb::MessageParser<PitchTypeInfo>(() => new PitchTypeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PitchTypeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchTypeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchTypeInfo(PitchTypeInfo other) : this() {
      type_ = other.type_;
      grade_ = other.grade_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchTypeInfo Clone() {
      return new PitchTypeInfo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Protocols.PitchType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.PitchType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 2;
    private global::Protocols.PitchTypeGrade grade_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.PitchTypeGrade Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PitchTypeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PitchTypeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Grade != other.Grade) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Grade != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Grade);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Grade);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PitchTypeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Protocols.PitchType) input.ReadEnum();
            break;
          }
          case 16: {
            grade_ = (global::Protocols.PitchTypeGrade) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class BattingProficiency : pb::IMessage<BattingProficiency> {
    private static readonly pb::MessageParser<BattingProficiency> _parser = new pb::MessageParser<BattingProficiency>(() => new BattingProficiency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattingProficiency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattingProficiency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattingProficiency(BattingProficiency other) : this() {
      goodBlocks_ = other.goodBlocks_.Clone();
      badBlocks_ = other.badBlocks_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattingProficiency Clone() {
      return new BattingProficiency(this);
    }

    /// <summary>Field number for the "goodBlocks" field.</summary>
    public const int GoodBlocksFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_goodBlocks_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> goodBlocks_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> GoodBlocks {
      get { return goodBlocks_; }
    }

    /// <summary>Field number for the "badBlocks" field.</summary>
    public const int BadBlocksFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_badBlocks_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> badBlocks_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BadBlocks {
      get { return badBlocks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattingProficiency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattingProficiency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!goodBlocks_.Equals(other.goodBlocks_)) return false;
      if(!badBlocks_.Equals(other.badBlocks_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= goodBlocks_.GetHashCode();
      hash ^= badBlocks_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      goodBlocks_.WriteTo(output, _repeated_goodBlocks_codec);
      badBlocks_.WriteTo(output, _repeated_badBlocks_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += goodBlocks_.CalculateSize(_repeated_goodBlocks_codec);
      size += badBlocks_.CalculateSize(_repeated_badBlocks_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattingProficiency other) {
      if (other == null) {
        return;
      }
      goodBlocks_.Add(other.goodBlocks_);
      badBlocks_.Add(other.badBlocks_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            goodBlocks_.AddEntriesFrom(input, _repeated_goodBlocks_codec);
            break;
          }
          case 18:
          case 16: {
            badBlocks_.AddEntriesFrom(input, _repeated_badBlocks_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// 场上野区状态
  /// </summary>
  public sealed partial class FieldSituation : pb::IMessage<FieldSituation> {
    private static readonly pb::MessageParser<FieldSituation> _parser = new pb::MessageParser<FieldSituation>(() => new FieldSituation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldSituation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldSituation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldSituation(FieldSituation other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldSituation Clone() {
      return new FieldSituation(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldSituation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldSituation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldSituation other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class DominateOpStatus : pb::IMessage<DominateOpStatus> {
    private static readonly pb::MessageParser<DominateOpStatus> _parser = new pb::MessageParser<DominateOpStatus>(() => new DominateOpStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DominateOpStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateOpStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateOpStatus(DominateOpStatus other) : this() {
      count_ = other.count_;
      countByPitchType_ = other.countByPitchType_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateOpStatus Clone() {
      return new DominateOpStatus(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private uint count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "countByPitchType" field.</summary>
    public const int CountByPitchTypeFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_countByPitchType_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> countByPitchType_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> CountByPitchType {
      get { return countByPitchType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DominateOpStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DominateOpStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      if(!countByPitchType_.Equals(other.countByPitchType_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      hash ^= countByPitchType_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Count);
      }
      countByPitchType_.WriteTo(output, _repeated_countByPitchType_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      size += countByPitchType_.CalculateSize(_repeated_countByPitchType_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DominateOpStatus other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      countByPitchType_.Add(other.countByPitchType_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Count = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            countByPitchType_.AddEntriesFrom(input, _repeated_countByPitchType_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class DominateStatus : pb::IMessage<DominateStatus> {
    private static readonly pb::MessageParser<DominateStatus> _parser = new pb::MessageParser<DominateStatus>(() => new DominateStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DominateStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateStatus(DominateStatus other) : this() {
      pitcherOverLordEnergy_ = other.pitcherOverLordEnergy_;
      batterOverLordEnergy_ = other.batterOverLordEnergy_;
      activeOpStatus_ = other.activeOpStatus_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateStatus Clone() {
      return new DominateStatus(this);
    }

    /// <summary>Field number for the "pitcherOverLordEnergy" field.</summary>
    public const int PitcherOverLordEnergyFieldNumber = 1;
    private float pitcherOverLordEnergy_;
    /// <summary>
    /// 目前投手攒的气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PitcherOverLordEnergy {
      get { return pitcherOverLordEnergy_; }
      set {
        pitcherOverLordEnergy_ = value;
      }
    }

    /// <summary>Field number for the "batterOverLordEnergy" field.</summary>
    public const int BatterOverLordEnergyFieldNumber = 2;
    private float batterOverLordEnergy_;
    /// <summary>
    /// 目前打手攒的气
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BatterOverLordEnergy {
      get { return batterOverLordEnergy_; }
      set {
        batterOverLordEnergy_ = value;
      }
    }

    /// <summary>Field number for the "activeOpStatus" field.</summary>
    public const int ActiveOpStatusFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocols.DominateOpStatus> _repeated_activeOpStatus_codec
        = pb::FieldCodec.ForMessage(26, global::Protocols.DominateOpStatus.Parser);
    private readonly pbc::RepeatedField<global::Protocols.DominateOpStatus> activeOpStatus_ = new pbc::RepeatedField<global::Protocols.DominateOpStatus>();
    /// <summary>
    /// The index is DominateType
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.DominateOpStatus> ActiveOpStatus {
      get { return activeOpStatus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DominateStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DominateStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PitcherOverLordEnergy, other.PitcherOverLordEnergy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatterOverLordEnergy, other.BatterOverLordEnergy)) return false;
      if(!activeOpStatus_.Equals(other.activeOpStatus_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PitcherOverLordEnergy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PitcherOverLordEnergy);
      if (BatterOverLordEnergy != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatterOverLordEnergy);
      hash ^= activeOpStatus_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PitcherOverLordEnergy != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PitcherOverLordEnergy);
      }
      if (BatterOverLordEnergy != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BatterOverLordEnergy);
      }
      activeOpStatus_.WriteTo(output, _repeated_activeOpStatus_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PitcherOverLordEnergy != 0F) {
        size += 1 + 4;
      }
      if (BatterOverLordEnergy != 0F) {
        size += 1 + 4;
      }
      size += activeOpStatus_.CalculateSize(_repeated_activeOpStatus_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DominateStatus other) {
      if (other == null) {
        return;
      }
      if (other.PitcherOverLordEnergy != 0F) {
        PitcherOverLordEnergy = other.PitcherOverLordEnergy;
      }
      if (other.BatterOverLordEnergy != 0F) {
        BatterOverLordEnergy = other.BatterOverLordEnergy;
      }
      activeOpStatus_.Add(other.activeOpStatus_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PitcherOverLordEnergy = input.ReadFloat();
            break;
          }
          case 21: {
            BatterOverLordEnergy = input.ReadFloat();
            break;
          }
          case 26: {
            activeOpStatus_.AddEntriesFrom(input, _repeated_activeOpStatus_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// 这个是在球投出之前就要决定的数据
  /// </summary>
  public sealed partial class PitchMode : pb::IMessage<PitchMode> {
    private static readonly pb::MessageParser<PitchMode> _parser = new pb::MessageParser<PitchMode>(() => new PitchMode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PitchMode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchMode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchMode(PitchMode other) : this() {
      dominate_ = other.dominate_ != null ? other.dominate_.Clone() : null;
      battingMode_ = other.battingMode_;
      stealBase_ = other.stealBase_ != null ? other.stealBase_.Clone() : null;
      autoPlay_ = other.autoPlay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchMode Clone() {
      return new PitchMode(this);
    }

    /// <summary>Field number for the "dominate" field.</summary>
    public const int DominateFieldNumber = 1;
    private global::Protocols.DominateStatus dominate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.DominateStatus Dominate {
      get { return dominate_; }
      set {
        dominate_ = value;
      }
    }

    /// <summary>Field number for the "battingMode" field.</summary>
    public const int BattingModeFieldNumber = 2;
    private global::Protocols.BattingMode battingMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BattingMode BattingMode {
      get { return battingMode_; }
      set {
        battingMode_ = value;
      }
    }

    /// <summary>Field number for the "stealBase" field.</summary>
    public const int StealBaseFieldNumber = 3;
    private global::Protocols.StealBaseStatus stealBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.StealBaseStatus StealBase {
      get { return stealBase_; }
      set {
        stealBase_ = value;
      }
    }

    /// <summary>Field number for the "autoPlay" field.</summary>
    public const int AutoPlayFieldNumber = 4;
    private bool autoPlay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoPlay {
      get { return autoPlay_; }
      set {
        autoPlay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PitchMode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PitchMode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Dominate, other.Dominate)) return false;
      if (BattingMode != other.BattingMode) return false;
      if (!object.Equals(StealBase, other.StealBase)) return false;
      if (AutoPlay != other.AutoPlay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (dominate_ != null) hash ^= Dominate.GetHashCode();
      if (BattingMode != 0) hash ^= BattingMode.GetHashCode();
      if (stealBase_ != null) hash ^= StealBase.GetHashCode();
      if (AutoPlay != false) hash ^= AutoPlay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (dominate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Dominate);
      }
      if (BattingMode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BattingMode);
      }
      if (stealBase_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(StealBase);
      }
      if (AutoPlay != false) {
        output.WriteRawTag(32);
        output.WriteBool(AutoPlay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (dominate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Dominate);
      }
      if (BattingMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BattingMode);
      }
      if (stealBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StealBase);
      }
      if (AutoPlay != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PitchMode other) {
      if (other == null) {
        return;
      }
      if (other.dominate_ != null) {
        if (dominate_ == null) {
          dominate_ = new global::Protocols.DominateStatus();
        }
        Dominate.MergeFrom(other.Dominate);
      }
      if (other.BattingMode != 0) {
        BattingMode = other.BattingMode;
      }
      if (other.stealBase_ != null) {
        if (stealBase_ == null) {
          stealBase_ = new global::Protocols.StealBaseStatus();
        }
        StealBase.MergeFrom(other.StealBase);
      }
      if (other.AutoPlay != false) {
        AutoPlay = other.AutoPlay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (dominate_ == null) {
              dominate_ = new global::Protocols.DominateStatus();
            }
            input.ReadMessage(dominate_);
            break;
          }
          case 16: {
            battingMode_ = (global::Protocols.BattingMode) input.ReadEnum();
            break;
          }
          case 26: {
            if (stealBase_ == null) {
              stealBase_ = new global::Protocols.StealBaseStatus();
            }
            input.ReadMessage(stealBase_);
            break;
          }
          case 32: {
            AutoPlay = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// 打手擅长区块。投手在选目标时显示的红/蓝块。
  /// </summary>
  public sealed partial class BatterProficiency : pb::IMessage<BatterProficiency> {
    private static readonly pb::MessageParser<BatterProficiency> _parser = new pb::MessageParser<BatterProficiency>(() => new BatterProficiency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatterProficiency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatterProficiency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatterProficiency(BatterProficiency other) : this() {
      good_ = other.good_.Clone();
      bad_ = other.bad_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatterProficiency Clone() {
      return new BatterProficiency(this);
    }

    /// <summary>Field number for the "good" field.</summary>
    public const int GoodFieldNumber = 1;
    private static readonly pb::FieldCodec<uint> _repeated_good_codec
        = pb::FieldCodec.ForUInt32(10);
    private readonly pbc::RepeatedField<uint> good_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Good {
      get { return good_; }
    }

    /// <summary>Field number for the "bad" field.</summary>
    public const int BadFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_bad_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> bad_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Bad {
      get { return bad_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatterProficiency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatterProficiency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!good_.Equals(other.good_)) return false;
      if(!bad_.Equals(other.bad_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= good_.GetHashCode();
      hash ^= bad_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      good_.WriteTo(output, _repeated_good_codec);
      bad_.WriteTo(output, _repeated_bad_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += good_.CalculateSize(_repeated_good_codec);
      size += bad_.CalculateSize(_repeated_bad_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatterProficiency other) {
      if (other == null) {
        return;
      }
      good_.Add(other.good_);
      bad_.Add(other.bad_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            good_.AddEntriesFrom(input, _repeated_good_codec);
            break;
          }
          case 18:
          case 16: {
            bad_.AddEntriesFrom(input, _repeated_bad_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class PitchSelection : pb::IMessage<PitchSelection> {
    private static readonly pb::MessageParser<PitchSelection> _parser = new pb::MessageParser<PitchSelection>(() => new PitchSelection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PitchSelection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchSelection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchSelection(PitchSelection other) : this() {
      ballType_ = other.ballType_;
      targetX_ = other.targetX_;
      targetY_ = other.targetY_;
      puzzleType_ = other.puzzleType_;
      eval_ = other.eval_;
      pitchSpeed_ = other.pitchSpeed_;
      offsetLength_ = other.offsetLength_;
      pickoff_ = other.pickoff_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchSelection Clone() {
      return new PitchSelection(this);
    }

    /// <summary>Field number for the "ballType" field.</summary>
    public const int BallTypeFieldNumber = 1;
    private uint ballType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BallType {
      get { return ballType_; }
      set {
        ballType_ = value;
      }
    }

    /// <summary>Field number for the "targetX" field.</summary>
    public const int TargetXFieldNumber = 2;
    private float targetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetX {
      get { return targetX_; }
      set {
        targetX_ = value;
      }
    }

    /// <summary>Field number for the "targetY" field.</summary>
    public const int TargetYFieldNumber = 3;
    private float targetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetY {
      get { return targetY_; }
      set {
        targetY_ = value;
      }
    }

    /// <summary>Field number for the "puzzleType" field.</summary>
    public const int PuzzleTypeFieldNumber = 4;
    private uint puzzleType_;
    /// <summary>
    ///bool dominate = 4; // 没用了，现在用PitchMode里的dominate来判断。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PuzzleType {
      get { return puzzleType_; }
      set {
        puzzleType_ = value;
      }
    }

    /// <summary>Field number for the "eval" field.</summary>
    public const int EvalFieldNumber = 5;
    private uint eval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eval {
      get { return eval_; }
      set {
        eval_ = value;
      }
    }

    /// <summary>Field number for the "pitchSpeed" field.</summary>
    public const int PitchSpeedFieldNumber = 6;
    private float pitchSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PitchSpeed {
      get { return pitchSpeed_; }
      set {
        pitchSpeed_ = value;
      }
    }

    /// <summary>Field number for the "offsetLength" field.</summary>
    public const int OffsetLengthFieldNumber = 7;
    private float offsetLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OffsetLength {
      get { return offsetLength_; }
      set {
        offsetLength_ = value;
      }
    }

    /// <summary>Field number for the "pickoff" field.</summary>
    public const int PickoffFieldNumber = 8;
    private uint pickoff_;
    /// <summary>
    /// 0 - 非牵制。 1~3 - 牵制指定垒上跑者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pickoff {
      get { return pickoff_; }
      set {
        pickoff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PitchSelection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PitchSelection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BallType != other.BallType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetX, other.TargetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetY, other.TargetY)) return false;
      if (PuzzleType != other.PuzzleType) return false;
      if (Eval != other.Eval) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PitchSpeed, other.PitchSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OffsetLength, other.OffsetLength)) return false;
      if (Pickoff != other.Pickoff) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BallType != 0) hash ^= BallType.GetHashCode();
      if (TargetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetX);
      if (TargetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetY);
      if (PuzzleType != 0) hash ^= PuzzleType.GetHashCode();
      if (Eval != 0) hash ^= Eval.GetHashCode();
      if (PitchSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PitchSpeed);
      if (OffsetLength != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OffsetLength);
      if (Pickoff != 0) hash ^= Pickoff.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BallType != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BallType);
      }
      if (TargetX != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(TargetX);
      }
      if (TargetY != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TargetY);
      }
      if (PuzzleType != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PuzzleType);
      }
      if (Eval != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Eval);
      }
      if (PitchSpeed != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PitchSpeed);
      }
      if (OffsetLength != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(OffsetLength);
      }
      if (Pickoff != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Pickoff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BallType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BallType);
      }
      if (TargetX != 0F) {
        size += 1 + 4;
      }
      if (TargetY != 0F) {
        size += 1 + 4;
      }
      if (PuzzleType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PuzzleType);
      }
      if (Eval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eval);
      }
      if (PitchSpeed != 0F) {
        size += 1 + 4;
      }
      if (OffsetLength != 0F) {
        size += 1 + 4;
      }
      if (Pickoff != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pickoff);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PitchSelection other) {
      if (other == null) {
        return;
      }
      if (other.BallType != 0) {
        BallType = other.BallType;
      }
      if (other.TargetX != 0F) {
        TargetX = other.TargetX;
      }
      if (other.TargetY != 0F) {
        TargetY = other.TargetY;
      }
      if (other.PuzzleType != 0) {
        PuzzleType = other.PuzzleType;
      }
      if (other.Eval != 0) {
        Eval = other.Eval;
      }
      if (other.PitchSpeed != 0F) {
        PitchSpeed = other.PitchSpeed;
      }
      if (other.OffsetLength != 0F) {
        OffsetLength = other.OffsetLength;
      }
      if (other.Pickoff != 0) {
        Pickoff = other.Pickoff;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BallType = input.ReadUInt32();
            break;
          }
          case 21: {
            TargetX = input.ReadFloat();
            break;
          }
          case 29: {
            TargetY = input.ReadFloat();
            break;
          }
          case 32: {
            PuzzleType = input.ReadUInt32();
            break;
          }
          case 40: {
            Eval = input.ReadUInt32();
            break;
          }
          case 53: {
            PitchSpeed = input.ReadFloat();
            break;
          }
          case 61: {
            OffsetLength = input.ReadFloat();
            break;
          }
          case 64: {
            Pickoff = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class BattingInfo : pb::IMessage<BattingInfo> {
    private static readonly pb::MessageParser<BattingInfo> _parser = new pb::MessageParser<BattingInfo>(() => new BattingInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattingInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattingInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattingInfo(BattingInfo other) : this() {
      auto_ = other.auto_;
      bat_ = other.bat_;
      time_ = other.time_;
      dir_ = other.dir_;
      eval_ = other.eval_;
      batOpType_ = other.batOpType_;
      targetY_ = other.targetY_;
      targetXAfterBat_ = other.targetXAfterBat_;
      targetYAfterBat_ = other.targetYAfterBat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattingInfo Clone() {
      return new BattingInfo(this);
    }

    /// <summary>Field number for the "auto" field.</summary>
    public const int AutoFieldNumber = 1;
    private bool auto_;
    /// <summary>
    /// 是否是自动模式（一般是单机才会这样）。如果是true，下面到result之前的字段无效。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Auto {
      get { return auto_; }
      set {
        auto_ = value;
      }
    }

    /// <summary>Field number for the "bat" field.</summary>
    public const int BatFieldNumber = 2;
    private bool bat_;
    /// <summary>
    /// 是否挥棒了。如果是false，下面到result之前的字段无效。
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Bat {
      get { return bat_; }
      set {
        bat_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    /// <summary>
    /// 挥棒时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "dir" field.</summary>
    public const int DirFieldNumber = 4;
    private global::Protocols.BatDir dir_ = 0;
    /// <summary>
    /// 挥棒方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BatDir Dir {
      get { return dir_; }
      set {
        dir_ = value;
      }
    }

    /// <summary>Field number for the "eval" field.</summary>
    public const int EvalFieldNumber = 5;
    private global::Protocols.BatOperationResultType eval_ = 0;
    /// <summary>
    /// 挥棒评分
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BatOperationResultType Eval {
      get { return eval_; }
      set {
        eval_ = value;
      }
    }

    /// <summary>Field number for the "batOpType" field.</summary>
    public const int BatOpTypeFieldNumber = 6;
    private global::Protocols.BatOpType batOpType_ = 0;
    /// <summary>
    /// 击球的模式：1-普通打击，2-摆棒子强震，3-主宰时刻-精确落点 // TODO: 应当用DominateStatus以及BattingMode来判断
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BatOpType BatOpType {
      get { return batOpType_; }
      set {
        batOpType_ = value;
      }
    }

    /// <summary>Field number for the "targetY" field.</summary>
    public const int TargetYFieldNumber = 7;
    private float targetY_;
    /// <summary>
    /// 挥棒落点 // TODO: 将主宰时刻有关的打击数据放到一个专门的数据里
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetY {
      get { return targetY_; }
      set {
        targetY_ = value;
      }
    }

    /// <summary>Field number for the "targetXAfterBat" field.</summary>
    public const int TargetXAfterBatFieldNumber = 8;
    private float targetXAfterBat_;
    /// <summary>
    /// 挥棒后的落点X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetXAfterBat {
      get { return targetXAfterBat_; }
      set {
        targetXAfterBat_ = value;
      }
    }

    /// <summary>Field number for the "targetYAfterBat" field.</summary>
    public const int TargetYAfterBatFieldNumber = 9;
    private float targetYAfterBat_;
    /// <summary>
    /// 挥棒后的落点Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetYAfterBat {
      get { return targetYAfterBat_; }
      set {
        targetYAfterBat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattingInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattingInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Auto != other.Auto) return false;
      if (Bat != other.Bat) return false;
      if (Time != other.Time) return false;
      if (Dir != other.Dir) return false;
      if (Eval != other.Eval) return false;
      if (BatOpType != other.BatOpType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetY, other.TargetY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetXAfterBat, other.TargetXAfterBat)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetYAfterBat, other.TargetYAfterBat)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Auto != false) hash ^= Auto.GetHashCode();
      if (Bat != false) hash ^= Bat.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Dir != 0) hash ^= Dir.GetHashCode();
      if (Eval != 0) hash ^= Eval.GetHashCode();
      if (BatOpType != 0) hash ^= BatOpType.GetHashCode();
      if (TargetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetY);
      if (TargetXAfterBat != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetXAfterBat);
      if (TargetYAfterBat != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetYAfterBat);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Auto != false) {
        output.WriteRawTag(8);
        output.WriteBool(Auto);
      }
      if (Bat != false) {
        output.WriteRawTag(16);
        output.WriteBool(Bat);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
      if (Dir != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Dir);
      }
      if (Eval != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Eval);
      }
      if (BatOpType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BatOpType);
      }
      if (TargetY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(TargetY);
      }
      if (TargetXAfterBat != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(TargetXAfterBat);
      }
      if (TargetYAfterBat != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(TargetYAfterBat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Auto != false) {
        size += 1 + 1;
      }
      if (Bat != false) {
        size += 1 + 1;
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (Dir != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Dir);
      }
      if (Eval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Eval);
      }
      if (BatOpType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BatOpType);
      }
      if (TargetY != 0F) {
        size += 1 + 4;
      }
      if (TargetXAfterBat != 0F) {
        size += 1 + 4;
      }
      if (TargetYAfterBat != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattingInfo other) {
      if (other == null) {
        return;
      }
      if (other.Auto != false) {
        Auto = other.Auto;
      }
      if (other.Bat != false) {
        Bat = other.Bat;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Dir != 0) {
        Dir = other.Dir;
      }
      if (other.Eval != 0) {
        Eval = other.Eval;
      }
      if (other.BatOpType != 0) {
        BatOpType = other.BatOpType;
      }
      if (other.TargetY != 0F) {
        TargetY = other.TargetY;
      }
      if (other.TargetXAfterBat != 0F) {
        TargetXAfterBat = other.TargetXAfterBat;
      }
      if (other.TargetYAfterBat != 0F) {
        TargetYAfterBat = other.TargetYAfterBat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Auto = input.ReadBool();
            break;
          }
          case 16: {
            Bat = input.ReadBool();
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
          case 32: {
            dir_ = (global::Protocols.BatDir) input.ReadEnum();
            break;
          }
          case 40: {
            eval_ = (global::Protocols.BatOperationResultType) input.ReadEnum();
            break;
          }
          case 48: {
            batOpType_ = (global::Protocols.BatOpType) input.ReadEnum();
            break;
          }
          case 61: {
            TargetY = input.ReadFloat();
            break;
          }
          case 69: {
            TargetXAfterBat = input.ReadFloat();
            break;
          }
          case 77: {
            TargetYAfterBat = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// 跑垒者
  /// </summary>
  public sealed partial class BaseRunners : pb::IMessage<BaseRunners> {
    private static readonly pb::MessageParser<BaseRunners> _parser = new pb::MessageParser<BaseRunners>(() => new BaseRunners());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BaseRunners> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRunners() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRunners(BaseRunners other) : this() {
      first_ = other.first_;
      second_ = other.second_;
      third_ = other.third_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BaseRunners Clone() {
      return new BaseRunners(this);
    }

    /// <summary>Field number for the "first" field.</summary>
    public const int FirstFieldNumber = 1;
    private uint first_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint First {
      get { return first_; }
      set {
        first_ = value;
      }
    }

    /// <summary>Field number for the "second" field.</summary>
    public const int SecondFieldNumber = 2;
    private uint second_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Second {
      get { return second_; }
      set {
        second_ = value;
      }
    }

    /// <summary>Field number for the "third" field.</summary>
    public const int ThirdFieldNumber = 3;
    private uint third_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Third {
      get { return third_; }
      set {
        third_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BaseRunners);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BaseRunners other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (First != other.First) return false;
      if (Second != other.Second) return false;
      if (Third != other.Third) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (First != 0) hash ^= First.GetHashCode();
      if (Second != 0) hash ^= Second.GetHashCode();
      if (Third != 0) hash ^= Third.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (First != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(First);
      }
      if (Second != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Second);
      }
      if (Third != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Third);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (First != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(First);
      }
      if (Second != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Second);
      }
      if (Third != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Third);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BaseRunners other) {
      if (other == null) {
        return;
      }
      if (other.First != 0) {
        First = other.First;
      }
      if (other.Second != 0) {
        Second = other.Second;
      }
      if (other.Third != 0) {
        Third = other.Third;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            First = input.ReadUInt32();
            break;
          }
          case 16: {
            Second = input.ReadUInt32();
            break;
          }
          case 24: {
            Third = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// 跑垒的一个关键帧
  /// </summary>
  public sealed partial class RunFrame : pb::IMessage<RunFrame> {
    private static readonly pb::MessageParser<RunFrame> _parser = new pb::MessageParser<RunFrame>(() => new RunFrame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunFrame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame(RunFrame other) : this() {
      type_ = other.type_;
      frameDefenseMove_ = other.frameDefenseMove_ != null ? other.frameDefenseMove_.Clone() : null;
      frameRunBase_ = other.frameRunBase_ != null ? other.frameRunBase_.Clone() : null;
      frameCatch_ = other.frameCatch_ != null ? other.frameCatch_.Clone() : null;
      frameHitBallCatch_ = other.frameHitBallCatch_ != null ? other.frameHitBallCatch_.Clone() : null;
      framePickoff_ = other.framePickoff_ != null ? other.framePickoff_.Clone() : null;
      frameCatcherPickoff_ = other.frameCatcherPickoff_ != null ? other.frameCatcherPickoff_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame Clone() {
      return new RunFrame(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 100;
    private global::Protocols.RunFrameType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.RunFrameType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "frameDefenseMove" field.</summary>
    public const int FrameDefenseMoveFieldNumber = 1;
    private global::Protocols.RunFrame_DefenseMove frameDefenseMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.RunFrame_DefenseMove FrameDefenseMove {
      get { return frameDefenseMove_; }
      set {
        frameDefenseMove_ = value;
      }
    }

    /// <summary>Field number for the "frameRunBase" field.</summary>
    public const int FrameRunBaseFieldNumber = 2;
    private global::Protocols.RunFrame_RunBase frameRunBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.RunFrame_RunBase FrameRunBase {
      get { return frameRunBase_; }
      set {
        frameRunBase_ = value;
      }
    }

    /// <summary>Field number for the "frameCatch" field.</summary>
    public const int FrameCatchFieldNumber = 3;
    private global::Protocols.RunFrame_Catch frameCatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.RunFrame_Catch FrameCatch {
      get { return frameCatch_; }
      set {
        frameCatch_ = value;
      }
    }

    /// <summary>Field number for the "frameHitBallCatch" field.</summary>
    public const int FrameHitBallCatchFieldNumber = 4;
    private global::Protocols.RunFrame_HitBallCatch frameHitBallCatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.RunFrame_HitBallCatch FrameHitBallCatch {
      get { return frameHitBallCatch_; }
      set {
        frameHitBallCatch_ = value;
      }
    }

    /// <summary>Field number for the "framePickoff" field.</summary>
    public const int FramePickoffFieldNumber = 5;
    private global::Protocols.RunFrame_Pickoff framePickoff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.RunFrame_Pickoff FramePickoff {
      get { return framePickoff_; }
      set {
        framePickoff_ = value;
      }
    }

    /// <summary>Field number for the "frameCatcherPickoff" field.</summary>
    public const int FrameCatcherPickoffFieldNumber = 6;
    private global::Protocols.RunFrame_CatcherPickoff frameCatcherPickoff_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.RunFrame_CatcherPickoff FrameCatcherPickoff {
      get { return frameCatcherPickoff_; }
      set {
        frameCatcherPickoff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunFrame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunFrame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(FrameDefenseMove, other.FrameDefenseMove)) return false;
      if (!object.Equals(FrameRunBase, other.FrameRunBase)) return false;
      if (!object.Equals(FrameCatch, other.FrameCatch)) return false;
      if (!object.Equals(FrameHitBallCatch, other.FrameHitBallCatch)) return false;
      if (!object.Equals(FramePickoff, other.FramePickoff)) return false;
      if (!object.Equals(FrameCatcherPickoff, other.FrameCatcherPickoff)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (frameDefenseMove_ != null) hash ^= FrameDefenseMove.GetHashCode();
      if (frameRunBase_ != null) hash ^= FrameRunBase.GetHashCode();
      if (frameCatch_ != null) hash ^= FrameCatch.GetHashCode();
      if (frameHitBallCatch_ != null) hash ^= FrameHitBallCatch.GetHashCode();
      if (framePickoff_ != null) hash ^= FramePickoff.GetHashCode();
      if (frameCatcherPickoff_ != null) hash ^= FrameCatcherPickoff.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (frameDefenseMove_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(FrameDefenseMove);
      }
      if (frameRunBase_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(FrameRunBase);
      }
      if (frameCatch_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(FrameCatch);
      }
      if (frameHitBallCatch_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(FrameHitBallCatch);
      }
      if (framePickoff_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FramePickoff);
      }
      if (frameCatcherPickoff_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(FrameCatcherPickoff);
      }
      if (Type != 0) {
        output.WriteRawTag(160, 6);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (frameDefenseMove_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameDefenseMove);
      }
      if (frameRunBase_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameRunBase);
      }
      if (frameCatch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameCatch);
      }
      if (frameHitBallCatch_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameHitBallCatch);
      }
      if (framePickoff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FramePickoff);
      }
      if (frameCatcherPickoff_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FrameCatcherPickoff);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunFrame other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.frameDefenseMove_ != null) {
        if (frameDefenseMove_ == null) {
          frameDefenseMove_ = new global::Protocols.RunFrame_DefenseMove();
        }
        FrameDefenseMove.MergeFrom(other.FrameDefenseMove);
      }
      if (other.frameRunBase_ != null) {
        if (frameRunBase_ == null) {
          frameRunBase_ = new global::Protocols.RunFrame_RunBase();
        }
        FrameRunBase.MergeFrom(other.FrameRunBase);
      }
      if (other.frameCatch_ != null) {
        if (frameCatch_ == null) {
          frameCatch_ = new global::Protocols.RunFrame_Catch();
        }
        FrameCatch.MergeFrom(other.FrameCatch);
      }
      if (other.frameHitBallCatch_ != null) {
        if (frameHitBallCatch_ == null) {
          frameHitBallCatch_ = new global::Protocols.RunFrame_HitBallCatch();
        }
        FrameHitBallCatch.MergeFrom(other.FrameHitBallCatch);
      }
      if (other.framePickoff_ != null) {
        if (framePickoff_ == null) {
          framePickoff_ = new global::Protocols.RunFrame_Pickoff();
        }
        FramePickoff.MergeFrom(other.FramePickoff);
      }
      if (other.frameCatcherPickoff_ != null) {
        if (frameCatcherPickoff_ == null) {
          frameCatcherPickoff_ = new global::Protocols.RunFrame_CatcherPickoff();
        }
        FrameCatcherPickoff.MergeFrom(other.FrameCatcherPickoff);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (frameDefenseMove_ == null) {
              frameDefenseMove_ = new global::Protocols.RunFrame_DefenseMove();
            }
            input.ReadMessage(frameDefenseMove_);
            break;
          }
          case 18: {
            if (frameRunBase_ == null) {
              frameRunBase_ = new global::Protocols.RunFrame_RunBase();
            }
            input.ReadMessage(frameRunBase_);
            break;
          }
          case 26: {
            if (frameCatch_ == null) {
              frameCatch_ = new global::Protocols.RunFrame_Catch();
            }
            input.ReadMessage(frameCatch_);
            break;
          }
          case 34: {
            if (frameHitBallCatch_ == null) {
              frameHitBallCatch_ = new global::Protocols.RunFrame_HitBallCatch();
            }
            input.ReadMessage(frameHitBallCatch_);
            break;
          }
          case 42: {
            if (framePickoff_ == null) {
              framePickoff_ = new global::Protocols.RunFrame_Pickoff();
            }
            input.ReadMessage(framePickoff_);
            break;
          }
          case 50: {
            if (frameCatcherPickoff_ == null) {
              frameCatcherPickoff_ = new global::Protocols.RunFrame_CatcherPickoff();
            }
            input.ReadMessage(frameCatcherPickoff_);
            break;
          }
          case 800: {
            type_ = (global::Protocols.RunFrameType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class RunFrame_DefenseMove : pb::IMessage<RunFrame_DefenseMove> {
    private static readonly pb::MessageParser<RunFrame_DefenseMove> _parser = new pb::MessageParser<RunFrame_DefenseMove>(() => new RunFrame_DefenseMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunFrame_DefenseMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_DefenseMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_DefenseMove(RunFrame_DefenseMove other) : this() {
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      player_ = other.player_;
      targetPasser_ = other.targetPasser_;
      toBase_ = other.toBase_;
      targetX_ = other.targetX_;
      targetY_ = other.targetY_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_DefenseMove Clone() {
      return new RunFrame_DefenseMove(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private float startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private float endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "player" field.</summary>
    public const int PlayerFieldNumber = 3;
    private global::Protocols.OnFieldRole player_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole Player {
      get { return player_; }
      set {
        player_ = value;
      }
    }

    /// <summary>Field number for the "targetPasser" field.</summary>
    public const int TargetPasserFieldNumber = 4;
    private global::Protocols.OnFieldRole targetPasser_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole TargetPasser {
      get { return targetPasser_; }
      set {
        targetPasser_ = value;
      }
    }

    /// <summary>Field number for the "toBase" field.</summary>
    public const int ToBaseFieldNumber = 5;
    private uint toBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToBase {
      get { return toBase_; }
      set {
        toBase_ = value;
      }
    }

    /// <summary>Field number for the "targetX" field.</summary>
    public const int TargetXFieldNumber = 6;
    private float targetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetX {
      get { return targetX_; }
      set {
        targetX_ = value;
      }
    }

    /// <summary>Field number for the "targetY" field.</summary>
    public const int TargetYFieldNumber = 7;
    private float targetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetY {
      get { return targetY_; }
      set {
        targetY_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunFrame_DefenseMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunFrame_DefenseMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartTime, other.StartTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTime, other.EndTime)) return false;
      if (Player != other.Player) return false;
      if (TargetPasser != other.TargetPasser) return false;
      if (ToBase != other.ToBase) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetX, other.TargetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetY, other.TargetY)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartTime);
      if (EndTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTime);
      if (Player != 0) hash ^= Player.GetHashCode();
      if (TargetPasser != 0) hash ^= TargetPasser.GetHashCode();
      if (ToBase != 0) hash ^= ToBase.GetHashCode();
      if (TargetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetX);
      if (TargetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetY);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTime != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(StartTime);
      }
      if (EndTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(EndTime);
      }
      if (Player != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Player);
      }
      if (TargetPasser != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TargetPasser);
      }
      if (ToBase != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ToBase);
      }
      if (TargetX != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(TargetX);
      }
      if (TargetY != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(TargetY);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0F) {
        size += 1 + 4;
      }
      if (EndTime != 0F) {
        size += 1 + 4;
      }
      if (Player != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Player);
      }
      if (TargetPasser != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TargetPasser);
      }
      if (ToBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToBase);
      }
      if (TargetX != 0F) {
        size += 1 + 4;
      }
      if (TargetY != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunFrame_DefenseMove other) {
      if (other == null) {
        return;
      }
      if (other.StartTime != 0F) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0F) {
        EndTime = other.EndTime;
      }
      if (other.Player != 0) {
        Player = other.Player;
      }
      if (other.TargetPasser != 0) {
        TargetPasser = other.TargetPasser;
      }
      if (other.ToBase != 0) {
        ToBase = other.ToBase;
      }
      if (other.TargetX != 0F) {
        TargetX = other.TargetX;
      }
      if (other.TargetY != 0F) {
        TargetY = other.TargetY;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            StartTime = input.ReadFloat();
            break;
          }
          case 21: {
            EndTime = input.ReadFloat();
            break;
          }
          case 24: {
            player_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
          case 32: {
            targetPasser_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
          case 40: {
            ToBase = input.ReadUInt32();
            break;
          }
          case 53: {
            TargetX = input.ReadFloat();
            break;
          }
          case 61: {
            TargetY = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class RunFrame_RunBase : pb::IMessage<RunFrame_RunBase> {
    private static readonly pb::MessageParser<RunFrame_RunBase> _parser = new pb::MessageParser<RunFrame_RunBase>(() => new RunFrame_RunBase());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunFrame_RunBase> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_RunBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_RunBase(RunFrame_RunBase other) : this() {
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      runner_ = other.runner_;
      fromBase_ = other.fromBase_;
      toBase_ = other.toBase_;
      outTime_ = other.outTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_RunBase Clone() {
      return new RunFrame_RunBase(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private float startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private float endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "runner" field.</summary>
    public const int RunnerFieldNumber = 3;
    private global::Protocols.OnFieldRole runner_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole Runner {
      get { return runner_; }
      set {
        runner_ = value;
      }
    }

    /// <summary>Field number for the "fromBase" field.</summary>
    public const int FromBaseFieldNumber = 4;
    private uint fromBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FromBase {
      get { return fromBase_; }
      set {
        fromBase_ = value;
      }
    }

    /// <summary>Field number for the "toBase" field.</summary>
    public const int ToBaseFieldNumber = 5;
    private uint toBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToBase {
      get { return toBase_; }
      set {
        toBase_ = value;
      }
    }

    /// <summary>Field number for the "outTime" field.</summary>
    public const int OutTimeFieldNumber = 6;
    private float outTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutTime {
      get { return outTime_; }
      set {
        outTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunFrame_RunBase);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunFrame_RunBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartTime, other.StartTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTime, other.EndTime)) return false;
      if (Runner != other.Runner) return false;
      if (FromBase != other.FromBase) return false;
      if (ToBase != other.ToBase) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OutTime, other.OutTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartTime);
      if (EndTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTime);
      if (Runner != 0) hash ^= Runner.GetHashCode();
      if (FromBase != 0) hash ^= FromBase.GetHashCode();
      if (ToBase != 0) hash ^= ToBase.GetHashCode();
      if (OutTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OutTime);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTime != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(StartTime);
      }
      if (EndTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(EndTime);
      }
      if (Runner != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Runner);
      }
      if (FromBase != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FromBase);
      }
      if (ToBase != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ToBase);
      }
      if (OutTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(OutTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0F) {
        size += 1 + 4;
      }
      if (EndTime != 0F) {
        size += 1 + 4;
      }
      if (Runner != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Runner);
      }
      if (FromBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FromBase);
      }
      if (ToBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToBase);
      }
      if (OutTime != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunFrame_RunBase other) {
      if (other == null) {
        return;
      }
      if (other.StartTime != 0F) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0F) {
        EndTime = other.EndTime;
      }
      if (other.Runner != 0) {
        Runner = other.Runner;
      }
      if (other.FromBase != 0) {
        FromBase = other.FromBase;
      }
      if (other.ToBase != 0) {
        ToBase = other.ToBase;
      }
      if (other.OutTime != 0F) {
        OutTime = other.OutTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            StartTime = input.ReadFloat();
            break;
          }
          case 21: {
            EndTime = input.ReadFloat();
            break;
          }
          case 24: {
            runner_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
          case 32: {
            FromBase = input.ReadUInt32();
            break;
          }
          case 40: {
            ToBase = input.ReadUInt32();
            break;
          }
          case 53: {
            OutTime = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class RunFrame_Catch : pb::IMessage<RunFrame_Catch> {
    private static readonly pb::MessageParser<RunFrame_Catch> _parser = new pb::MessageParser<RunFrame_Catch>(() => new RunFrame_Catch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunFrame_Catch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_Catch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_Catch(RunFrame_Catch other) : this() {
      endTime_ = other.endTime_;
      passer_ = other.passer_;
      catcher_ = other.catcher_;
      toBase_ = other.toBase_;
      hitGroundTimes_ = other.hitGroundTimes_;
      outAthleteOnFieldRole_ = other.outAthleteOnFieldRole_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_Catch Clone() {
      return new RunFrame_Catch(this);
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 1;
    private float endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "passer" field.</summary>
    public const int PasserFieldNumber = 2;
    private global::Protocols.OnFieldRole passer_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole Passer {
      get { return passer_; }
      set {
        passer_ = value;
      }
    }

    /// <summary>Field number for the "catcher" field.</summary>
    public const int CatcherFieldNumber = 3;
    private global::Protocols.OnFieldRole catcher_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole Catcher {
      get { return catcher_; }
      set {
        catcher_ = value;
      }
    }

    /// <summary>Field number for the "toBase" field.</summary>
    public const int ToBaseFieldNumber = 4;
    private uint toBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToBase {
      get { return toBase_; }
      set {
        toBase_ = value;
      }
    }

    /// <summary>Field number for the "hitGroundTimes" field.</summary>
    public const int HitGroundTimesFieldNumber = 5;
    private uint hitGroundTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HitGroundTimes {
      get { return hitGroundTimes_; }
      set {
        hitGroundTimes_ = value;
      }
    }

    /// <summary>Field number for the "outAthleteOnFieldRole" field.</summary>
    public const int OutAthleteOnFieldRoleFieldNumber = 6;
    private global::Protocols.OnFieldRole outAthleteOnFieldRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole OutAthleteOnFieldRole {
      get { return outAthleteOnFieldRole_; }
      set {
        outAthleteOnFieldRole_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunFrame_Catch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunFrame_Catch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTime, other.EndTime)) return false;
      if (Passer != other.Passer) return false;
      if (Catcher != other.Catcher) return false;
      if (ToBase != other.ToBase) return false;
      if (HitGroundTimes != other.HitGroundTimes) return false;
      if (OutAthleteOnFieldRole != other.OutAthleteOnFieldRole) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTime);
      if (Passer != 0) hash ^= Passer.GetHashCode();
      if (Catcher != 0) hash ^= Catcher.GetHashCode();
      if (ToBase != 0) hash ^= ToBase.GetHashCode();
      if (HitGroundTimes != 0) hash ^= HitGroundTimes.GetHashCode();
      if (OutAthleteOnFieldRole != 0) hash ^= OutAthleteOnFieldRole.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndTime != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(EndTime);
      }
      if (Passer != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Passer);
      }
      if (Catcher != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Catcher);
      }
      if (ToBase != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ToBase);
      }
      if (HitGroundTimes != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(HitGroundTimes);
      }
      if (OutAthleteOnFieldRole != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) OutAthleteOnFieldRole);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndTime != 0F) {
        size += 1 + 4;
      }
      if (Passer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Passer);
      }
      if (Catcher != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Catcher);
      }
      if (ToBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToBase);
      }
      if (HitGroundTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HitGroundTimes);
      }
      if (OutAthleteOnFieldRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutAthleteOnFieldRole);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunFrame_Catch other) {
      if (other == null) {
        return;
      }
      if (other.EndTime != 0F) {
        EndTime = other.EndTime;
      }
      if (other.Passer != 0) {
        Passer = other.Passer;
      }
      if (other.Catcher != 0) {
        Catcher = other.Catcher;
      }
      if (other.ToBase != 0) {
        ToBase = other.ToBase;
      }
      if (other.HitGroundTimes != 0) {
        HitGroundTimes = other.HitGroundTimes;
      }
      if (other.OutAthleteOnFieldRole != 0) {
        OutAthleteOnFieldRole = other.OutAthleteOnFieldRole;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            EndTime = input.ReadFloat();
            break;
          }
          case 16: {
            passer_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
          case 24: {
            catcher_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
          case 32: {
            ToBase = input.ReadUInt32();
            break;
          }
          case 40: {
            HitGroundTimes = input.ReadUInt32();
            break;
          }
          case 48: {
            outAthleteOnFieldRole_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class RunFrame_HitBallCatch : pb::IMessage<RunFrame_HitBallCatch> {
    private static readonly pb::MessageParser<RunFrame_HitBallCatch> _parser = new pb::MessageParser<RunFrame_HitBallCatch>(() => new RunFrame_HitBallCatch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunFrame_HitBallCatch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_HitBallCatch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_HitBallCatch(RunFrame_HitBallCatch other) : this() {
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      catcher_ = other.catcher_;
      targetX_ = other.targetX_;
      targetY_ = other.targetY_;
      hitGroundTimes_ = other.hitGroundTimes_;
      isRollingBall_ = other.isRollingBall_;
      outAthleteOnFieldRole_ = other.outAthleteOnFieldRole_;
      isHitWall_ = other.isHitWall_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_HitBallCatch Clone() {
      return new RunFrame_HitBallCatch(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private float startTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private float endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "catcher" field.</summary>
    public const int CatcherFieldNumber = 3;
    private global::Protocols.OnFieldRole catcher_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole Catcher {
      get { return catcher_; }
      set {
        catcher_ = value;
      }
    }

    /// <summary>Field number for the "targetX" field.</summary>
    public const int TargetXFieldNumber = 4;
    private float targetX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetX {
      get { return targetX_; }
      set {
        targetX_ = value;
      }
    }

    /// <summary>Field number for the "targetY" field.</summary>
    public const int TargetYFieldNumber = 5;
    private float targetY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetY {
      get { return targetY_; }
      set {
        targetY_ = value;
      }
    }

    /// <summary>Field number for the "hitGroundTimes" field.</summary>
    public const int HitGroundTimesFieldNumber = 6;
    private uint hitGroundTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HitGroundTimes {
      get { return hitGroundTimes_; }
      set {
        hitGroundTimes_ = value;
      }
    }

    /// <summary>Field number for the "isRollingBall" field.</summary>
    public const int IsRollingBallFieldNumber = 7;
    private bool isRollingBall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRollingBall {
      get { return isRollingBall_; }
      set {
        isRollingBall_ = value;
      }
    }

    /// <summary>Field number for the "outAthleteOnFieldRole" field.</summary>
    public const int OutAthleteOnFieldRoleFieldNumber = 8;
    private global::Protocols.OnFieldRole outAthleteOnFieldRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole OutAthleteOnFieldRole {
      get { return outAthleteOnFieldRole_; }
      set {
        outAthleteOnFieldRole_ = value;
      }
    }

    /// <summary>Field number for the "isHitWall" field.</summary>
    public const int IsHitWallFieldNumber = 9;
    private bool isHitWall_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsHitWall {
      get { return isHitWall_; }
      set {
        isHitWall_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunFrame_HitBallCatch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunFrame_HitBallCatch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(StartTime, other.StartTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTime, other.EndTime)) return false;
      if (Catcher != other.Catcher) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetX, other.TargetX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetY, other.TargetY)) return false;
      if (HitGroundTimes != other.HitGroundTimes) return false;
      if (IsRollingBall != other.IsRollingBall) return false;
      if (OutAthleteOnFieldRole != other.OutAthleteOnFieldRole) return false;
      if (IsHitWall != other.IsHitWall) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(StartTime);
      if (EndTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTime);
      if (Catcher != 0) hash ^= Catcher.GetHashCode();
      if (TargetX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetX);
      if (TargetY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetY);
      if (HitGroundTimes != 0) hash ^= HitGroundTimes.GetHashCode();
      if (IsRollingBall != false) hash ^= IsRollingBall.GetHashCode();
      if (OutAthleteOnFieldRole != 0) hash ^= OutAthleteOnFieldRole.GetHashCode();
      if (IsHitWall != false) hash ^= IsHitWall.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTime != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(StartTime);
      }
      if (EndTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(EndTime);
      }
      if (Catcher != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Catcher);
      }
      if (TargetX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TargetX);
      }
      if (TargetY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(TargetY);
      }
      if (HitGroundTimes != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HitGroundTimes);
      }
      if (IsRollingBall != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsRollingBall);
      }
      if (OutAthleteOnFieldRole != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) OutAthleteOnFieldRole);
      }
      if (IsHitWall != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsHitWall);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0F) {
        size += 1 + 4;
      }
      if (EndTime != 0F) {
        size += 1 + 4;
      }
      if (Catcher != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Catcher);
      }
      if (TargetX != 0F) {
        size += 1 + 4;
      }
      if (TargetY != 0F) {
        size += 1 + 4;
      }
      if (HitGroundTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HitGroundTimes);
      }
      if (IsRollingBall != false) {
        size += 1 + 1;
      }
      if (OutAthleteOnFieldRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutAthleteOnFieldRole);
      }
      if (IsHitWall != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunFrame_HitBallCatch other) {
      if (other == null) {
        return;
      }
      if (other.StartTime != 0F) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0F) {
        EndTime = other.EndTime;
      }
      if (other.Catcher != 0) {
        Catcher = other.Catcher;
      }
      if (other.TargetX != 0F) {
        TargetX = other.TargetX;
      }
      if (other.TargetY != 0F) {
        TargetY = other.TargetY;
      }
      if (other.HitGroundTimes != 0) {
        HitGroundTimes = other.HitGroundTimes;
      }
      if (other.IsRollingBall != false) {
        IsRollingBall = other.IsRollingBall;
      }
      if (other.OutAthleteOnFieldRole != 0) {
        OutAthleteOnFieldRole = other.OutAthleteOnFieldRole;
      }
      if (other.IsHitWall != false) {
        IsHitWall = other.IsHitWall;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            StartTime = input.ReadFloat();
            break;
          }
          case 21: {
            EndTime = input.ReadFloat();
            break;
          }
          case 24: {
            catcher_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
          case 37: {
            TargetX = input.ReadFloat();
            break;
          }
          case 45: {
            TargetY = input.ReadFloat();
            break;
          }
          case 48: {
            HitGroundTimes = input.ReadUInt32();
            break;
          }
          case 56: {
            IsRollingBall = input.ReadBool();
            break;
          }
          case 64: {
            outAthleteOnFieldRole_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
          case 72: {
            IsHitWall = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class RunFrame_Pickoff : pb::IMessage<RunFrame_Pickoff> {
    private static readonly pb::MessageParser<RunFrame_Pickoff> _parser = new pb::MessageParser<RunFrame_Pickoff>(() => new RunFrame_Pickoff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunFrame_Pickoff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_Pickoff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_Pickoff(RunFrame_Pickoff other) : this() {
      base_ = other.base_;
      isOut_ = other.isOut_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_Pickoff Clone() {
      return new RunFrame_Pickoff(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private uint base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "isOut" field.</summary>
    public const int IsOutFieldNumber = 2;
    private bool isOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOut {
      get { return isOut_; }
      set {
        isOut_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunFrame_Pickoff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunFrame_Pickoff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Base != other.Base) return false;
      if (IsOut != other.IsOut) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Base != 0) hash ^= Base.GetHashCode();
      if (IsOut != false) hash ^= IsOut.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Base != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Base);
      }
      if (IsOut != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsOut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Base != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Base);
      }
      if (IsOut != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunFrame_Pickoff other) {
      if (other == null) {
        return;
      }
      if (other.Base != 0) {
        Base = other.Base;
      }
      if (other.IsOut != false) {
        IsOut = other.IsOut;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Base = input.ReadUInt32();
            break;
          }
          case 16: {
            IsOut = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class RunFrame_CatcherPickoff : pb::IMessage<RunFrame_CatcherPickoff> {
    private static readonly pb::MessageParser<RunFrame_CatcherPickoff> _parser = new pb::MessageParser<RunFrame_CatcherPickoff>(() => new RunFrame_CatcherPickoff());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunFrame_CatcherPickoff> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_CatcherPickoff() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_CatcherPickoff(RunFrame_CatcherPickoff other) : this() {
      endTime_ = other.endTime_;
      outTime_ = other.outTime_;
      catcher_ = other.catcher_;
      toBase_ = other.toBase_;
      outAthleteOnFieldRole_ = other.outAthleteOnFieldRole_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunFrame_CatcherPickoff Clone() {
      return new RunFrame_CatcherPickoff(this);
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 1;
    private float endTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "outTime" field.</summary>
    public const int OutTimeFieldNumber = 2;
    private float outTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutTime {
      get { return outTime_; }
      set {
        outTime_ = value;
      }
    }

    /// <summary>Field number for the "catcher" field.</summary>
    public const int CatcherFieldNumber = 3;
    private global::Protocols.OnFieldRole catcher_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole Catcher {
      get { return catcher_; }
      set {
        catcher_ = value;
      }
    }

    /// <summary>Field number for the "toBase" field.</summary>
    public const int ToBaseFieldNumber = 4;
    private uint toBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ToBase {
      get { return toBase_; }
      set {
        toBase_ = value;
      }
    }

    /// <summary>Field number for the "outAthleteOnFieldRole" field.</summary>
    public const int OutAthleteOnFieldRoleFieldNumber = 5;
    private global::Protocols.OnFieldRole outAthleteOnFieldRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole OutAthleteOnFieldRole {
      get { return outAthleteOnFieldRole_; }
      set {
        outAthleteOnFieldRole_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunFrame_CatcherPickoff);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunFrame_CatcherPickoff other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EndTime, other.EndTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OutTime, other.OutTime)) return false;
      if (Catcher != other.Catcher) return false;
      if (ToBase != other.ToBase) return false;
      if (OutAthleteOnFieldRole != other.OutAthleteOnFieldRole) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EndTime);
      if (OutTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OutTime);
      if (Catcher != 0) hash ^= Catcher.GetHashCode();
      if (ToBase != 0) hash ^= ToBase.GetHashCode();
      if (OutAthleteOnFieldRole != 0) hash ^= OutAthleteOnFieldRole.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndTime != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(EndTime);
      }
      if (OutTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(OutTime);
      }
      if (Catcher != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Catcher);
      }
      if (ToBase != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ToBase);
      }
      if (OutAthleteOnFieldRole != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) OutAthleteOnFieldRole);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndTime != 0F) {
        size += 1 + 4;
      }
      if (OutTime != 0F) {
        size += 1 + 4;
      }
      if (Catcher != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Catcher);
      }
      if (ToBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ToBase);
      }
      if (OutAthleteOnFieldRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutAthleteOnFieldRole);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunFrame_CatcherPickoff other) {
      if (other == null) {
        return;
      }
      if (other.EndTime != 0F) {
        EndTime = other.EndTime;
      }
      if (other.OutTime != 0F) {
        OutTime = other.OutTime;
      }
      if (other.Catcher != 0) {
        Catcher = other.Catcher;
      }
      if (other.ToBase != 0) {
        ToBase = other.ToBase;
      }
      if (other.OutAthleteOnFieldRole != 0) {
        OutAthleteOnFieldRole = other.OutAthleteOnFieldRole;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            EndTime = input.ReadFloat();
            break;
          }
          case 21: {
            OutTime = input.ReadFloat();
            break;
          }
          case 24: {
            catcher_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
          case 32: {
            ToBase = input.ReadUInt32();
            break;
          }
          case 40: {
            outAthleteOnFieldRole_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class BatResult : pb::IMessage<BatResult> {
    private static readonly pb::MessageParser<BatResult> _parser = new pb::MessageParser<BatResult>(() => new BatResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatResult(BatResult other) : this() {
      result_ = other.result_;
      frames_ = other.frames_.Clone();
      pitchEndTime_ = other.pitchEndTime_;
      outFieldPositionX_ = other.outFieldPositionX_;
      outFieldPositionZ_ = other.outFieldPositionZ_;
      outFieldFlyTime_ = other.outFieldFlyTime_;
      outFieldFlyHitGroundTimes_ = other.outFieldFlyHitGroundTimes_;
      isFastOut_ = other.isFastOut_;
      isAutoSwing_ = other.isAutoSwing_;
      hitBallCatcherOnFieldRole_ = other.hitBallCatcherOnFieldRole_;
      trajectoryType_ = other.trajectoryType_;
      multiPlayDefenders_ = other.multiPlayDefenders_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatResult Clone() {
      return new BatResult(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Protocols.PitchResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.PitchResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "frames" field.</summary>
    public const int FramesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocols.RunFrame> _repeated_frames_codec
        = pb::FieldCodec.ForMessage(18, global::Protocols.RunFrame.Parser);
    private readonly pbc::RepeatedField<global::Protocols.RunFrame> frames_ = new pbc::RepeatedField<global::Protocols.RunFrame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.RunFrame> Frames {
      get { return frames_; }
    }

    /// <summary>Field number for the "pitchEndTime" field.</summary>
    public const int PitchEndTimeFieldNumber = 3;
    private float pitchEndTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PitchEndTime {
      get { return pitchEndTime_; }
      set {
        pitchEndTime_ = value;
      }
    }

    /// <summary>Field number for the "outFieldPositionX" field.</summary>
    public const int OutFieldPositionXFieldNumber = 4;
    private float outFieldPositionX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutFieldPositionX {
      get { return outFieldPositionX_; }
      set {
        outFieldPositionX_ = value;
      }
    }

    /// <summary>Field number for the "outFieldPositionZ" field.</summary>
    public const int OutFieldPositionZFieldNumber = 5;
    private float outFieldPositionZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutFieldPositionZ {
      get { return outFieldPositionZ_; }
      set {
        outFieldPositionZ_ = value;
      }
    }

    /// <summary>Field number for the "outFieldFlyTime" field.</summary>
    public const int OutFieldFlyTimeFieldNumber = 6;
    private float outFieldFlyTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float OutFieldFlyTime {
      get { return outFieldFlyTime_; }
      set {
        outFieldFlyTime_ = value;
      }
    }

    /// <summary>Field number for the "outFieldFlyHitGroundTimes" field.</summary>
    public const int OutFieldFlyHitGroundTimesFieldNumber = 7;
    private uint outFieldFlyHitGroundTimes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutFieldFlyHitGroundTimes {
      get { return outFieldFlyHitGroundTimes_; }
      set {
        outFieldFlyHitGroundTimes_ = value;
      }
    }

    /// <summary>Field number for the "isFastOut" field.</summary>
    public const int IsFastOutFieldNumber = 8;
    private bool isFastOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFastOut {
      get { return isFastOut_; }
      set {
        isFastOut_ = value;
      }
    }

    /// <summary>Field number for the "isAutoSwing" field.</summary>
    public const int IsAutoSwingFieldNumber = 9;
    private bool isAutoSwing_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAutoSwing {
      get { return isAutoSwing_; }
      set {
        isAutoSwing_ = value;
      }
    }

    /// <summary>Field number for the "hitBallCatcherOnFieldRole" field.</summary>
    public const int HitBallCatcherOnFieldRoleFieldNumber = 10;
    private global::Protocols.OnFieldRole hitBallCatcherOnFieldRole_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.OnFieldRole HitBallCatcherOnFieldRole {
      get { return hitBallCatcherOnFieldRole_; }
      set {
        hitBallCatcherOnFieldRole_ = value;
      }
    }

    /// <summary>Field number for the "trajectoryType" field.</summary>
    public const int TrajectoryTypeFieldNumber = 11;
    private global::Protocols.TrajectoryType trajectoryType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.TrajectoryType TrajectoryType {
      get { return trajectoryType_; }
      set {
        trajectoryType_ = value;
      }
    }

    /// <summary>Field number for the "multiPlayDefenders" field.</summary>
    public const int MultiPlayDefendersFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Protocols.OnFieldRole> _repeated_multiPlayDefenders_codec
        = pb::FieldCodec.ForEnum(98, x => (int) x, x => (global::Protocols.OnFieldRole) x);
    private readonly pbc::RepeatedField<global::Protocols.OnFieldRole> multiPlayDefenders_ = new pbc::RepeatedField<global::Protocols.OnFieldRole>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.OnFieldRole> MultiPlayDefenders {
      get { return multiPlayDefenders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if(!frames_.Equals(other.frames_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PitchEndTime, other.PitchEndTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OutFieldPositionX, other.OutFieldPositionX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OutFieldPositionZ, other.OutFieldPositionZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OutFieldFlyTime, other.OutFieldFlyTime)) return false;
      if (OutFieldFlyHitGroundTimes != other.OutFieldFlyHitGroundTimes) return false;
      if (IsFastOut != other.IsFastOut) return false;
      if (IsAutoSwing != other.IsAutoSwing) return false;
      if (HitBallCatcherOnFieldRole != other.HitBallCatcherOnFieldRole) return false;
      if (TrajectoryType != other.TrajectoryType) return false;
      if(!multiPlayDefenders_.Equals(other.multiPlayDefenders_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      hash ^= frames_.GetHashCode();
      if (PitchEndTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PitchEndTime);
      if (OutFieldPositionX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OutFieldPositionX);
      if (OutFieldPositionZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OutFieldPositionZ);
      if (OutFieldFlyTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OutFieldFlyTime);
      if (OutFieldFlyHitGroundTimes != 0) hash ^= OutFieldFlyHitGroundTimes.GetHashCode();
      if (IsFastOut != false) hash ^= IsFastOut.GetHashCode();
      if (IsAutoSwing != false) hash ^= IsAutoSwing.GetHashCode();
      if (HitBallCatcherOnFieldRole != 0) hash ^= HitBallCatcherOnFieldRole.GetHashCode();
      if (TrajectoryType != 0) hash ^= TrajectoryType.GetHashCode();
      hash ^= multiPlayDefenders_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      frames_.WriteTo(output, _repeated_frames_codec);
      if (PitchEndTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PitchEndTime);
      }
      if (OutFieldPositionX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(OutFieldPositionX);
      }
      if (OutFieldPositionZ != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(OutFieldPositionZ);
      }
      if (OutFieldFlyTime != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(OutFieldFlyTime);
      }
      if (OutFieldFlyHitGroundTimes != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(OutFieldFlyHitGroundTimes);
      }
      if (IsFastOut != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsFastOut);
      }
      if (IsAutoSwing != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsAutoSwing);
      }
      if (HitBallCatcherOnFieldRole != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) HitBallCatcherOnFieldRole);
      }
      if (TrajectoryType != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) TrajectoryType);
      }
      multiPlayDefenders_.WriteTo(output, _repeated_multiPlayDefenders_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      size += frames_.CalculateSize(_repeated_frames_codec);
      if (PitchEndTime != 0F) {
        size += 1 + 4;
      }
      if (OutFieldPositionX != 0F) {
        size += 1 + 4;
      }
      if (OutFieldPositionZ != 0F) {
        size += 1 + 4;
      }
      if (OutFieldFlyTime != 0F) {
        size += 1 + 4;
      }
      if (OutFieldFlyHitGroundTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutFieldFlyHitGroundTimes);
      }
      if (IsFastOut != false) {
        size += 1 + 1;
      }
      if (IsAutoSwing != false) {
        size += 1 + 1;
      }
      if (HitBallCatcherOnFieldRole != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HitBallCatcherOnFieldRole);
      }
      if (TrajectoryType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrajectoryType);
      }
      size += multiPlayDefenders_.CalculateSize(_repeated_multiPlayDefenders_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatResult other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      frames_.Add(other.frames_);
      if (other.PitchEndTime != 0F) {
        PitchEndTime = other.PitchEndTime;
      }
      if (other.OutFieldPositionX != 0F) {
        OutFieldPositionX = other.OutFieldPositionX;
      }
      if (other.OutFieldPositionZ != 0F) {
        OutFieldPositionZ = other.OutFieldPositionZ;
      }
      if (other.OutFieldFlyTime != 0F) {
        OutFieldFlyTime = other.OutFieldFlyTime;
      }
      if (other.OutFieldFlyHitGroundTimes != 0) {
        OutFieldFlyHitGroundTimes = other.OutFieldFlyHitGroundTimes;
      }
      if (other.IsFastOut != false) {
        IsFastOut = other.IsFastOut;
      }
      if (other.IsAutoSwing != false) {
        IsAutoSwing = other.IsAutoSwing;
      }
      if (other.HitBallCatcherOnFieldRole != 0) {
        HitBallCatcherOnFieldRole = other.HitBallCatcherOnFieldRole;
      }
      if (other.TrajectoryType != 0) {
        TrajectoryType = other.TrajectoryType;
      }
      multiPlayDefenders_.Add(other.multiPlayDefenders_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            result_ = (global::Protocols.PitchResult) input.ReadEnum();
            break;
          }
          case 18: {
            frames_.AddEntriesFrom(input, _repeated_frames_codec);
            break;
          }
          case 29: {
            PitchEndTime = input.ReadFloat();
            break;
          }
          case 37: {
            OutFieldPositionX = input.ReadFloat();
            break;
          }
          case 45: {
            OutFieldPositionZ = input.ReadFloat();
            break;
          }
          case 53: {
            OutFieldFlyTime = input.ReadFloat();
            break;
          }
          case 56: {
            OutFieldFlyHitGroundTimes = input.ReadUInt32();
            break;
          }
          case 64: {
            IsFastOut = input.ReadBool();
            break;
          }
          case 72: {
            IsAutoSwing = input.ReadBool();
            break;
          }
          case 80: {
            hitBallCatcherOnFieldRole_ = (global::Protocols.OnFieldRole) input.ReadEnum();
            break;
          }
          case 88: {
            trajectoryType_ = (global::Protocols.TrajectoryType) input.ReadEnum();
            break;
          }
          case 98:
          case 96: {
            multiPlayDefenders_.AddEntriesFrom(input, _repeated_multiPlayDefenders_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class PossibleBatResult : pb::IMessage<PossibleBatResult> {
    private static readonly pb::MessageParser<PossibleBatResult> _parser = new pb::MessageParser<PossibleBatResult>(() => new PossibleBatResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PossibleBatResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PossibleBatResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PossibleBatResult(PossibleBatResult other) : this() {
      resultType_ = other.resultType_;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PossibleBatResult Clone() {
      return new PossibleBatResult(this);
    }

    /// <summary>Field number for the "resultType" field.</summary>
    public const int ResultTypeFieldNumber = 1;
    private global::Protocols.BatOperationResultType resultType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BatOperationResultType ResultType {
      get { return resultType_; }
      set {
        resultType_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Protocols.BatResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BatResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PossibleBatResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PossibleBatResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResultType != other.ResultType) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResultType != 0) hash ^= ResultType.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResultType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ResultType);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResultType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultType);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PossibleBatResult other) {
      if (other == null) {
        return;
      }
      if (other.ResultType != 0) {
        ResultType = other.ResultType;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Protocols.BatResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            resultType_ = (global::Protocols.BatOperationResultType) input.ReadEnum();
            break;
          }
          case 18: {
            if (result_ == null) {
              result_ = new global::Protocols.BatResult();
            }
            input.ReadMessage(result_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class TeamStats : pb::IMessage<TeamStats> {
    private static readonly pb::MessageParser<TeamStats> _parser = new pb::MessageParser<TeamStats>(() => new TeamStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamStats(TeamStats other) : this() {
      runs_ = other.runs_;
      hits_ = other.hits_;
      errors_ = other.errors_;
      inningScores_ = other.inningScores_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamStats Clone() {
      return new TeamStats(this);
    }

    /// <summary>Field number for the "runs" field.</summary>
    public const int RunsFieldNumber = 1;
    private uint runs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Runs {
      get { return runs_; }
      set {
        runs_ = value;
      }
    }

    /// <summary>Field number for the "hits" field.</summary>
    public const int HitsFieldNumber = 2;
    private uint hits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Hits {
      get { return hits_; }
      set {
        hits_ = value;
      }
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 3;
    private uint errors_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Errors {
      get { return errors_; }
      set {
        errors_ = value;
      }
    }

    /// <summary>Field number for the "inningScores" field.</summary>
    public const int InningScoresFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_inningScores_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> inningScores_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> InningScores {
      get { return inningScores_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Runs != other.Runs) return false;
      if (Hits != other.Hits) return false;
      if (Errors != other.Errors) return false;
      if(!inningScores_.Equals(other.inningScores_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Runs != 0) hash ^= Runs.GetHashCode();
      if (Hits != 0) hash ^= Hits.GetHashCode();
      if (Errors != 0) hash ^= Errors.GetHashCode();
      hash ^= inningScores_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Runs != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Runs);
      }
      if (Hits != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Hits);
      }
      if (Errors != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Errors);
      }
      inningScores_.WriteTo(output, _repeated_inningScores_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Runs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Runs);
      }
      if (Hits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hits);
      }
      if (Errors != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Errors);
      }
      size += inningScores_.CalculateSize(_repeated_inningScores_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamStats other) {
      if (other == null) {
        return;
      }
      if (other.Runs != 0) {
        Runs = other.Runs;
      }
      if (other.Hits != 0) {
        Hits = other.Hits;
      }
      if (other.Errors != 0) {
        Errors = other.Errors;
      }
      inningScores_.Add(other.inningScores_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Runs = input.ReadUInt32();
            break;
          }
          case 16: {
            Hits = input.ReadUInt32();
            break;
          }
          case 24: {
            Errors = input.ReadUInt32();
            break;
          }
          case 34:
          case 32: {
            inningScores_.AddEntriesFrom(input, _repeated_inningScores_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class ChangedPlayerAbilities : pb::IMessage<ChangedPlayerAbilities> {
    private static readonly pb::MessageParser<ChangedPlayerAbilities> _parser = new pb::MessageParser<ChangedPlayerAbilities>(() => new ChangedPlayerAbilities());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangedPlayerAbilities> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedPlayerAbilities() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedPlayerAbilities(ChangedPlayerAbilities other) : this() {
      id_ = other.id_;
      abilities_ = other.abilities_ != null ? other.abilities_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangedPlayerAbilities Clone() {
      return new ChangedPlayerAbilities(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "abilities" field.</summary>
    public const int AbilitiesFieldNumber = 2;
    private global::Protocols.PlayerAbilities abilities_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.PlayerAbilities Abilities {
      get { return abilities_; }
      set {
        abilities_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangedPlayerAbilities);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangedPlayerAbilities other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Abilities, other.Abilities)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (abilities_ != null) hash ^= Abilities.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (abilities_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Abilities);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (abilities_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Abilities);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangedPlayerAbilities other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.abilities_ != null) {
        if (abilities_ == null) {
          abilities_ = new global::Protocols.PlayerAbilities();
        }
        Abilities.MergeFrom(other.Abilities);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            if (abilities_ == null) {
              abilities_ = new global::Protocols.PlayerAbilities();
            }
            input.ReadMessage(abilities_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SelectPitchOp : pb::IMessage<SelectPitchOp> {
    private static readonly pb::MessageParser<SelectPitchOp> _parser = new pb::MessageParser<SelectPitchOp>(() => new SelectPitchOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectPitchOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPitchOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPitchOp(SelectPitchOp other) : this() {
      selection_ = other.selection_ != null ? other.selection_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPitchOp Clone() {
      return new SelectPitchOp(this);
    }

    /// <summary>Field number for the "selection" field.</summary>
    public const int SelectionFieldNumber = 1;
    private global::Protocols.PitchSelection selection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.PitchSelection Selection {
      get { return selection_; }
      set {
        selection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectPitchOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectPitchOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selection, other.Selection)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selection_ != null) hash ^= Selection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selection);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectPitchOp other) {
      if (other == null) {
        return;
      }
      if (other.selection_ != null) {
        if (selection_ == null) {
          selection_ = new global::Protocols.PitchSelection();
        }
        Selection.MergeFrom(other.Selection);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selection_ == null) {
              selection_ = new global::Protocols.PitchSelection();
            }
            input.ReadMessage(selection_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SelectPitchResp : pb::IMessage<SelectPitchResp> {
    private static readonly pb::MessageParser<SelectPitchResp> _parser = new pb::MessageParser<SelectPitchResp>(() => new SelectPitchResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectPitchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPitchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPitchResp(SelectPitchResp other) : this() {
      selection_ = other.selection_ != null ? other.selection_.Clone() : null;
      possibleResults_ = other.possibleResults_.Clone();
      changedAbilities_ = other.changedAbilities_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectPitchResp Clone() {
      return new SelectPitchResp(this);
    }

    /// <summary>Field number for the "selection" field.</summary>
    public const int SelectionFieldNumber = 1;
    private global::Protocols.PitchSelection selection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.PitchSelection Selection {
      get { return selection_; }
      set {
        selection_ = value;
      }
    }

    /// <summary>Field number for the "possibleResults" field.</summary>
    public const int PossibleResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Protocols.PossibleBatResult> _repeated_possibleResults_codec
        = pb::FieldCodec.ForMessage(18, global::Protocols.PossibleBatResult.Parser);
    private readonly pbc::RepeatedField<global::Protocols.PossibleBatResult> possibleResults_ = new pbc::RepeatedField<global::Protocols.PossibleBatResult>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.PossibleBatResult> PossibleResults {
      get { return possibleResults_; }
    }

    /// <summary>Field number for the "changedAbilities" field.</summary>
    public const int ChangedAbilitiesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Protocols.ChangedPlayerAbilities> _repeated_changedAbilities_codec
        = pb::FieldCodec.ForMessage(26, global::Protocols.ChangedPlayerAbilities.Parser);
    private readonly pbc::RepeatedField<global::Protocols.ChangedPlayerAbilities> changedAbilities_ = new pbc::RepeatedField<global::Protocols.ChangedPlayerAbilities>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Protocols.ChangedPlayerAbilities> ChangedAbilities {
      get { return changedAbilities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectPitchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectPitchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Selection, other.Selection)) return false;
      if(!possibleResults_.Equals(other.possibleResults_)) return false;
      if(!changedAbilities_.Equals(other.changedAbilities_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (selection_ != null) hash ^= Selection.GetHashCode();
      hash ^= possibleResults_.GetHashCode();
      hash ^= changedAbilities_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (selection_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Selection);
      }
      possibleResults_.WriteTo(output, _repeated_possibleResults_codec);
      changedAbilities_.WriteTo(output, _repeated_changedAbilities_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (selection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Selection);
      }
      size += possibleResults_.CalculateSize(_repeated_possibleResults_codec);
      size += changedAbilities_.CalculateSize(_repeated_changedAbilities_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectPitchResp other) {
      if (other == null) {
        return;
      }
      if (other.selection_ != null) {
        if (selection_ == null) {
          selection_ = new global::Protocols.PitchSelection();
        }
        Selection.MergeFrom(other.Selection);
      }
      possibleResults_.Add(other.possibleResults_);
      changedAbilities_.Add(other.changedAbilities_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (selection_ == null) {
              selection_ = new global::Protocols.PitchSelection();
            }
            input.ReadMessage(selection_);
            break;
          }
          case 18: {
            possibleResults_.AddEntriesFrom(input, _repeated_possibleResults_codec);
            break;
          }
          case 26: {
            changedAbilities_.AddEntriesFrom(input, _repeated_changedAbilities_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO: Delete these Dominate Messages. // 投球主宰时刻现在无需单独的环节，沿用普通投球的数据即可。判断是否主宰时刻通过球种和相应的次数来判断
  /// </summary>
  public sealed partial class DominatePitchOp : pb::IMessage<DominatePitchOp> {
    private static readonly pb::MessageParser<DominatePitchOp> _parser = new pb::MessageParser<DominatePitchOp>(() => new DominatePitchOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DominatePitchOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominatePitchOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominatePitchOp(DominatePitchOp other) : this() {
      op_ = other.op_ != null ? other.op_.Clone() : null;
      eval_ = other.eval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominatePitchOp Clone() {
      return new DominatePitchOp(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private global::Protocols.SelectPitchOp op_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.SelectPitchOp Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "eval" field.</summary>
    public const int EvalFieldNumber = 2;
    private uint eval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eval {
      get { return eval_; }
      set {
        eval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DominatePitchOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DominatePitchOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Op, other.Op)) return false;
      if (Eval != other.Eval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (op_ != null) hash ^= Op.GetHashCode();
      if (Eval != 0) hash ^= Eval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (op_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Op);
      }
      if (Eval != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Eval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (op_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Op);
      }
      if (Eval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DominatePitchOp other) {
      if (other == null) {
        return;
      }
      if (other.op_ != null) {
        if (op_ == null) {
          op_ = new global::Protocols.SelectPitchOp();
        }
        Op.MergeFrom(other.Op);
      }
      if (other.Eval != 0) {
        Eval = other.Eval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (op_ == null) {
              op_ = new global::Protocols.SelectPitchOp();
            }
            input.ReadMessage(op_);
            break;
          }
          case 16: {
            Eval = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DominatePitchResp : pb::IMessage<DominatePitchResp> {
    private static readonly pb::MessageParser<DominatePitchResp> _parser = new pb::MessageParser<DominatePitchResp>(() => new DominatePitchResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DominatePitchResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominatePitchResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominatePitchResp(DominatePitchResp other) : this() {
      resp_ = other.resp_ != null ? other.resp_.Clone() : null;
      eval_ = other.eval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominatePitchResp Clone() {
      return new DominatePitchResp(this);
    }

    /// <summary>Field number for the "resp" field.</summary>
    public const int RespFieldNumber = 1;
    private global::Protocols.SelectPitchResp resp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.SelectPitchResp Resp {
      get { return resp_; }
      set {
        resp_ = value;
      }
    }

    /// <summary>Field number for the "eval" field.</summary>
    public const int EvalFieldNumber = 2;
    private uint eval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eval {
      get { return eval_; }
      set {
        eval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DominatePitchResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DominatePitchResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Resp, other.Resp)) return false;
      if (Eval != other.Eval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resp_ != null) hash ^= Resp.GetHashCode();
      if (Eval != 0) hash ^= Eval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Resp);
      }
      if (Eval != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Eval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resp);
      }
      if (Eval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DominatePitchResp other) {
      if (other == null) {
        return;
      }
      if (other.resp_ != null) {
        if (resp_ == null) {
          resp_ = new global::Protocols.SelectPitchResp();
        }
        Resp.MergeFrom(other.Resp);
      }
      if (other.Eval != 0) {
        Eval = other.Eval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (resp_ == null) {
              resp_ = new global::Protocols.SelectPitchResp();
            }
            input.ReadMessage(resp_);
            break;
          }
          case 16: {
            Eval = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatOp : pb::IMessage<BatOp> {
    private static readonly pb::MessageParser<BatOp> _parser = new pb::MessageParser<BatOp>(() => new BatOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatOp(BatOp other) : this() {
      bat_ = other.bat_ != null ? other.bat_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatOp Clone() {
      return new BatOp(this);
    }

    /// <summary>Field number for the "bat" field.</summary>
    public const int BatFieldNumber = 1;
    private global::Protocols.BattingInfo bat_;
    /// <summary>
    ///bool dominate = 2; // 现在通过DominateStatus判断
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BattingInfo Bat {
      get { return bat_; }
      set {
        bat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bat, other.Bat)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bat_ != null) hash ^= Bat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bat_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatOp other) {
      if (other == null) {
        return;
      }
      if (other.bat_ != null) {
        if (bat_ == null) {
          bat_ = new global::Protocols.BattingInfo();
        }
        Bat.MergeFrom(other.Bat);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (bat_ == null) {
              bat_ = new global::Protocols.BattingInfo();
            }
            input.ReadMessage(bat_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatResp : pb::IMessage<BatResp> {
    private static readonly pb::MessageParser<BatResp> _parser = new pb::MessageParser<BatResp>(() => new BatResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatResp(BatResp other) : this() {
      bat_ = other.bat_ != null ? other.bat_.Clone() : null;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      nextSituation_ = other.nextSituation_ != null ? other.nextSituation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatResp Clone() {
      return new BatResp(this);
    }

    /// <summary>Field number for the "bat" field.</summary>
    public const int BatFieldNumber = 1;
    private global::Protocols.BattingInfo bat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BattingInfo Bat {
      get { return bat_; }
      set {
        bat_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Protocols.BatResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BatResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "nextSituation" field.</summary>
    public const int NextSituationFieldNumber = 3;
    private global::Protocols.FullMatchSituation nextSituation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.FullMatchSituation NextSituation {
      get { return nextSituation_; }
      set {
        nextSituation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Bat, other.Bat)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      if (!object.Equals(NextSituation, other.NextSituation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (bat_ != null) hash ^= Bat.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (nextSituation_ != null) hash ^= NextSituation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (bat_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Bat);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (nextSituation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NextSituation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (bat_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bat);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (nextSituation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextSituation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatResp other) {
      if (other == null) {
        return;
      }
      if (other.bat_ != null) {
        if (bat_ == null) {
          bat_ = new global::Protocols.BattingInfo();
        }
        Bat.MergeFrom(other.Bat);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Protocols.BatResult();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.nextSituation_ != null) {
        if (nextSituation_ == null) {
          nextSituation_ = new global::Protocols.FullMatchSituation();
        }
        NextSituation.MergeFrom(other.NextSituation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (bat_ == null) {
              bat_ = new global::Protocols.BattingInfo();
            }
            input.ReadMessage(bat_);
            break;
          }
          case 18: {
            if (result_ == null) {
              result_ = new global::Protocols.BatResult();
            }
            input.ReadMessage(result_);
            break;
          }
          case 26: {
            if (nextSituation_ == null) {
              nextSituation_ = new global::Protocols.FullMatchSituation();
            }
            input.ReadMessage(nextSituation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DominateBatOp : pb::IMessage<DominateBatOp> {
    private static readonly pb::MessageParser<DominateBatOp> _parser = new pb::MessageParser<DominateBatOp>(() => new DominateBatOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DominateBatOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateBatOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateBatOp(DominateBatOp other) : this() {
      op_ = other.op_ != null ? other.op_.Clone() : null;
      eval_ = other.eval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateBatOp Clone() {
      return new DominateBatOp(this);
    }

    /// <summary>Field number for the "op" field.</summary>
    public const int OpFieldNumber = 1;
    private global::Protocols.BatOp op_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BatOp Op {
      get { return op_; }
      set {
        op_ = value;
      }
    }

    /// <summary>Field number for the "eval" field.</summary>
    public const int EvalFieldNumber = 2;
    private uint eval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eval {
      get { return eval_; }
      set {
        eval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DominateBatOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DominateBatOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Op, other.Op)) return false;
      if (Eval != other.Eval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (op_ != null) hash ^= Op.GetHashCode();
      if (Eval != 0) hash ^= Eval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (op_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Op);
      }
      if (Eval != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Eval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (op_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Op);
      }
      if (Eval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DominateBatOp other) {
      if (other == null) {
        return;
      }
      if (other.op_ != null) {
        if (op_ == null) {
          op_ = new global::Protocols.BatOp();
        }
        Op.MergeFrom(other.Op);
      }
      if (other.Eval != 0) {
        Eval = other.Eval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (op_ == null) {
              op_ = new global::Protocols.BatOp();
            }
            input.ReadMessage(op_);
            break;
          }
          case 16: {
            Eval = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DominateBatResp : pb::IMessage<DominateBatResp> {
    private static readonly pb::MessageParser<DominateBatResp> _parser = new pb::MessageParser<DominateBatResp>(() => new DominateBatResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DominateBatResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateBatResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateBatResp(DominateBatResp other) : this() {
      resp_ = other.resp_ != null ? other.resp_.Clone() : null;
      eval_ = other.eval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DominateBatResp Clone() {
      return new DominateBatResp(this);
    }

    /// <summary>Field number for the "resp" field.</summary>
    public const int RespFieldNumber = 1;
    private global::Protocols.BatResp resp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BatResp Resp {
      get { return resp_; }
      set {
        resp_ = value;
      }
    }

    /// <summary>Field number for the "eval" field.</summary>
    public const int EvalFieldNumber = 2;
    private uint eval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Eval {
      get { return eval_; }
      set {
        eval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DominateBatResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DominateBatResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Resp, other.Resp)) return false;
      if (Eval != other.Eval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resp_ != null) hash ^= Resp.GetHashCode();
      if (Eval != 0) hash ^= Eval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Resp);
      }
      if (Eval != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Eval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Resp);
      }
      if (Eval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Eval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DominateBatResp other) {
      if (other == null) {
        return;
      }
      if (other.resp_ != null) {
        if (resp_ == null) {
          resp_ = new global::Protocols.BatResp();
        }
        Resp.MergeFrom(other.Resp);
      }
      if (other.Eval != 0) {
        Eval = other.Eval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (resp_ == null) {
              resp_ = new global::Protocols.BatResp();
            }
            input.ReadMessage(resp_);
            break;
          }
          case 16: {
            Eval = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置主宰时刻的操作。会根据当前是打手还是投手来自动判断是哪种主宰时刻。由客户端发往服务器。
  /// </summary>
  public sealed partial class SetDominateOp : pb::IMessage<SetDominateOp> {
    private static readonly pb::MessageParser<SetDominateOp> _parser = new pb::MessageParser<SetDominateOp>(() => new SetDominateOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDominateOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDominateOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDominateOp(SetDominateOp other) : this() {
      active_ = other.active_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDominateOp Clone() {
      return new SetDominateOp(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDominateOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDominateOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDominateOp other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 主宰时刻开关被设置的事件通知。由服务器发往两个客户端。
  /// </summary>
  public sealed partial class SetDominateEvent : pb::IMessage<SetDominateEvent> {
    private static readonly pb::MessageParser<SetDominateEvent> _parser = new pb::MessageParser<SetDominateEvent>(() => new SetDominateEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDominateEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDominateEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDominateEvent(SetDominateEvent other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDominateEvent Clone() {
      return new SetDominateEvent(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Protocols.DominateStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.DominateStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDominateEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDominateEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDominateEvent other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Protocols.DominateStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Protocols.DominateStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[NoReg]
  /// </summary>
  public sealed partial class StealBaseStatus : pb::IMessage<StealBaseStatus> {
    private static readonly pb::MessageParser<StealBaseStatus> _parser = new pb::MessageParser<StealBaseStatus>(() => new StealBaseStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StealBaseStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StealBaseStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StealBaseStatus(StealBaseStatus other) : this() {
      base1_ = other.base1_;
      base2_ = other.base2_;
      base3_ = other.base3_;
      base1AdvanceDist_ = other.base1AdvanceDist_;
      base2AdvanceDist_ = other.base2AdvanceDist_;
      base3AdvanceDist_ = other.base3AdvanceDist_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StealBaseStatus Clone() {
      return new StealBaseStatus(this);
    }

    /// <summary>Field number for the "base1" field.</summary>
    public const int Base1FieldNumber = 1;
    private bool base1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Base1 {
      get { return base1_; }
      set {
        base1_ = value;
      }
    }

    /// <summary>Field number for the "base2" field.</summary>
    public const int Base2FieldNumber = 2;
    private bool base2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Base2 {
      get { return base2_; }
      set {
        base2_ = value;
      }
    }

    /// <summary>Field number for the "base3" field.</summary>
    public const int Base3FieldNumber = 3;
    private bool base3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Base3 {
      get { return base3_; }
      set {
        base3_ = value;
      }
    }

    /// <summary>Field number for the "base1AdvanceDist" field.</summary>
    public const int Base1AdvanceDistFieldNumber = 4;
    private float base1AdvanceDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Base1AdvanceDist {
      get { return base1AdvanceDist_; }
      set {
        base1AdvanceDist_ = value;
      }
    }

    /// <summary>Field number for the "base2AdvanceDist" field.</summary>
    public const int Base2AdvanceDistFieldNumber = 5;
    private float base2AdvanceDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Base2AdvanceDist {
      get { return base2AdvanceDist_; }
      set {
        base2AdvanceDist_ = value;
      }
    }

    /// <summary>Field number for the "base3AdvanceDist" field.</summary>
    public const int Base3AdvanceDistFieldNumber = 6;
    private float base3AdvanceDist_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Base3AdvanceDist {
      get { return base3AdvanceDist_; }
      set {
        base3AdvanceDist_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StealBaseStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StealBaseStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Base1 != other.Base1) return false;
      if (Base2 != other.Base2) return false;
      if (Base3 != other.Base3) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Base1AdvanceDist, other.Base1AdvanceDist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Base2AdvanceDist, other.Base2AdvanceDist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Base3AdvanceDist, other.Base3AdvanceDist)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Base1 != false) hash ^= Base1.GetHashCode();
      if (Base2 != false) hash ^= Base2.GetHashCode();
      if (Base3 != false) hash ^= Base3.GetHashCode();
      if (Base1AdvanceDist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Base1AdvanceDist);
      if (Base2AdvanceDist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Base2AdvanceDist);
      if (Base3AdvanceDist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Base3AdvanceDist);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Base1 != false) {
        output.WriteRawTag(8);
        output.WriteBool(Base1);
      }
      if (Base2 != false) {
        output.WriteRawTag(16);
        output.WriteBool(Base2);
      }
      if (Base3 != false) {
        output.WriteRawTag(24);
        output.WriteBool(Base3);
      }
      if (Base1AdvanceDist != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Base1AdvanceDist);
      }
      if (Base2AdvanceDist != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Base2AdvanceDist);
      }
      if (Base3AdvanceDist != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Base3AdvanceDist);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Base1 != false) {
        size += 1 + 1;
      }
      if (Base2 != false) {
        size += 1 + 1;
      }
      if (Base3 != false) {
        size += 1 + 1;
      }
      if (Base1AdvanceDist != 0F) {
        size += 1 + 4;
      }
      if (Base2AdvanceDist != 0F) {
        size += 1 + 4;
      }
      if (Base3AdvanceDist != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StealBaseStatus other) {
      if (other == null) {
        return;
      }
      if (other.Base1 != false) {
        Base1 = other.Base1;
      }
      if (other.Base2 != false) {
        Base2 = other.Base2;
      }
      if (other.Base3 != false) {
        Base3 = other.Base3;
      }
      if (other.Base1AdvanceDist != 0F) {
        Base1AdvanceDist = other.Base1AdvanceDist;
      }
      if (other.Base2AdvanceDist != 0F) {
        Base2AdvanceDist = other.Base2AdvanceDist;
      }
      if (other.Base3AdvanceDist != 0F) {
        Base3AdvanceDist = other.Base3AdvanceDist;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Base1 = input.ReadBool();
            break;
          }
          case 16: {
            Base2 = input.ReadBool();
            break;
          }
          case 24: {
            Base3 = input.ReadBool();
            break;
          }
          case 37: {
            Base1AdvanceDist = input.ReadFloat();
            break;
          }
          case 45: {
            Base2AdvanceDist = input.ReadFloat();
            break;
          }
          case 53: {
            Base3AdvanceDist = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置盗垒状态，攻方发往服务器
  /// </summary>
  public sealed partial class SetStealBaseOp : pb::IMessage<SetStealBaseOp> {
    private static readonly pb::MessageParser<SetStealBaseOp> _parser = new pb::MessageParser<SetStealBaseOp>(() => new SetStealBaseOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetStealBaseOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetStealBaseOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetStealBaseOp(SetStealBaseOp other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetStealBaseOp Clone() {
      return new SetStealBaseOp(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Protocols.StealBaseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.StealBaseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetStealBaseOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetStealBaseOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetStealBaseOp other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Protocols.StealBaseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Protocols.StealBaseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 通知盗垒状态，服务器发往客户端
  /// </summary>
  public sealed partial class SetStealBaseEvent : pb::IMessage<SetStealBaseEvent> {
    private static readonly pb::MessageParser<SetStealBaseEvent> _parser = new pb::MessageParser<SetStealBaseEvent>(() => new SetStealBaseEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetStealBaseEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetStealBaseEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetStealBaseEvent(SetStealBaseEvent other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetStealBaseEvent Clone() {
      return new SetStealBaseEvent(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Protocols.StealBaseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.StealBaseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetStealBaseEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetStealBaseEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetStealBaseEvent other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          status_ = new global::Protocols.StealBaseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              status_ = new global::Protocols.StealBaseStatus();
            }
            input.ReadMessage(status_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 设置打击模式（短打，强击，正常）
  /// </summary>
  public sealed partial class SetBattingModeOp : pb::IMessage<SetBattingModeOp> {
    private static readonly pb::MessageParser<SetBattingModeOp> _parser = new pb::MessageParser<SetBattingModeOp>(() => new SetBattingModeOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBattingModeOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBattingModeOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBattingModeOp(SetBattingModeOp other) : this() {
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBattingModeOp Clone() {
      return new SetBattingModeOp(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Protocols.BattingMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BattingMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBattingModeOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBattingModeOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBattingModeOp other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::Protocols.BattingMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetBattingModeEvent : pb::IMessage<SetBattingModeEvent> {
    private static readonly pb::MessageParser<SetBattingModeEvent> _parser = new pb::MessageParser<SetBattingModeEvent>(() => new SetBattingModeEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBattingModeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBattingModeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBattingModeEvent(SetBattingModeEvent other) : this() {
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBattingModeEvent Clone() {
      return new SetBattingModeEvent(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Protocols.BattingMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BattingMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBattingModeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBattingModeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBattingModeEvent other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            mode_ = (global::Protocols.BattingMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 尝试跳过过场动画之类的操作
  /// </summary>
  public sealed partial class MoveToNextStepOp : pb::IMessage<MoveToNextStepOp> {
    private static readonly pb::MessageParser<MoveToNextStepOp> _parser = new pb::MessageParser<MoveToNextStepOp>(() => new MoveToNextStepOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveToNextStepOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToNextStepOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToNextStepOp(MoveToNextStepOp other) : this() {
      step_ = other.step_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToNextStepOp Clone() {
      return new MoveToNextStepOp(this);
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 1;
    private uint step_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveToNextStepOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveToNextStepOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Step != other.Step) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Step != 0) hash ^= Step.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Step != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Step);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Step);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveToNextStepOp other) {
      if (other == null) {
        return;
      }
      if (other.Step != 0) {
        Step = other.Step;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Step = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveToNextStepResp : pb::IMessage<MoveToNextStepResp> {
    private static readonly pb::MessageParser<MoveToNextStepResp> _parser = new pb::MessageParser<MoveToNextStepResp>(() => new MoveToNextStepResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveToNextStepResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToNextStepResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToNextStepResp(MoveToNextStepResp other) : this() {
      step_ = other.step_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveToNextStepResp Clone() {
      return new MoveToNextStepResp(this);
    }

    /// <summary>Field number for the "step" field.</summary>
    public const int StepFieldNumber = 1;
    private uint step_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Step {
      get { return step_; }
      set {
        step_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveToNextStepResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveToNextStepResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Step != other.Step) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Step != 0) hash ^= Step.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Step != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Step);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Step != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Step);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveToNextStepResp other) {
      if (other == null) {
        return;
      }
      if (other.Step != 0) {
        Step = other.Step;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Step = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 投打准备
  /// </summary>
  public sealed partial class PitchPrepareOp : pb::IMessage<PitchPrepareOp> {
    private static readonly pb::MessageParser<PitchPrepareOp> _parser = new pb::MessageParser<PitchPrepareOp>(() => new PitchPrepareOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PitchPrepareOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchPrepareOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchPrepareOp(PitchPrepareOp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchPrepareOp Clone() {
      return new PitchPrepareOp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PitchPrepareOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PitchPrepareOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PitchPrepareOp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PitchReadyResp : pb::IMessage<PitchReadyResp> {
    private static readonly pb::MessageParser<PitchReadyResp> _parser = new pb::MessageParser<PitchReadyResp>(() => new PitchReadyResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PitchReadyResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchReadyResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchReadyResp(PitchReadyResp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitchReadyResp Clone() {
      return new PitchReadyResp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PitchReadyResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PitchReadyResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PitchReadyResp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class BatDoneOp : pb::IMessage<BatDoneOp> {
    private static readonly pb::MessageParser<BatDoneOp> _parser = new pb::MessageParser<BatDoneOp>(() => new BatDoneOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatDoneOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatDoneOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatDoneOp(BatDoneOp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatDoneOp Clone() {
      return new BatDoneOp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatDoneOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatDoneOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatDoneOp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class VainSwingOp : pb::IMessage<VainSwingOp> {
    private static readonly pb::MessageParser<VainSwingOp> _parser = new pb::MessageParser<VainSwingOp>(() => new VainSwingOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VainSwingOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VainSwingOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VainSwingOp(VainSwingOp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VainSwingOp Clone() {
      return new VainSwingOp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VainSwingOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VainSwingOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VainSwingOp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class VainSwingEvent : pb::IMessage<VainSwingEvent> {
    private static readonly pb::MessageParser<VainSwingEvent> _parser = new pb::MessageParser<VainSwingEvent>(() => new VainSwingEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VainSwingEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VainSwingEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VainSwingEvent(VainSwingEvent other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VainSwingEvent Clone() {
      return new VainSwingEvent(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VainSwingEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VainSwingEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VainSwingEvent other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PitcherUrgeEvent : pb::IMessage<PitcherUrgeEvent> {
    private static readonly pb::MessageParser<PitcherUrgeEvent> _parser = new pb::MessageParser<PitcherUrgeEvent>(() => new PitcherUrgeEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PitcherUrgeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitcherUrgeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitcherUrgeEvent(PitcherUrgeEvent other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PitcherUrgeEvent Clone() {
      return new PitcherUrgeEvent(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PitcherUrgeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PitcherUrgeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PitcherUrgeEvent other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class BeginBatSwingOp : pb::IMessage<BeginBatSwingOp> {
    private static readonly pb::MessageParser<BeginBatSwingOp> _parser = new pb::MessageParser<BeginBatSwingOp>(() => new BeginBatSwingOp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeginBatSwingOp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginBatSwingOp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginBatSwingOp(BeginBatSwingOp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginBatSwingOp Clone() {
      return new BeginBatSwingOp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeginBatSwingOp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeginBatSwingOp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeginBatSwingOp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class BeginBatSwingEvent : pb::IMessage<BeginBatSwingEvent> {
    private static readonly pb::MessageParser<BeginBatSwingEvent> _parser = new pb::MessageParser<BeginBatSwingEvent>(() => new BeginBatSwingEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BeginBatSwingEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginBatSwingEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginBatSwingEvent(BeginBatSwingEvent other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BeginBatSwingEvent Clone() {
      return new BeginBatSwingEvent(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BeginBatSwingEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BeginBatSwingEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BeginBatSwingEvent other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class SelectingBattingTargetEvent : pb::IMessage<SelectingBattingTargetEvent> {
    private static readonly pb::MessageParser<SelectingBattingTargetEvent> _parser = new pb::MessageParser<SelectingBattingTargetEvent>(() => new SelectingBattingTargetEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectingBattingTargetEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectingBattingTargetEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectingBattingTargetEvent(SelectingBattingTargetEvent other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectingBattingTargetEvent Clone() {
      return new SelectingBattingTargetEvent(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectingBattingTargetEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectingBattingTargetEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectingBattingTargetEvent other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[RegID(2001)]
  ///[FrameSyncBegin]
  /// </summary>
  public sealed partial class FrameSyncBegin : pb::IMessage<FrameSyncBegin> {
    private static readonly pb::MessageParser<FrameSyncBegin> _parser = new pb::MessageParser<FrameSyncBegin>(() => new FrameSyncBegin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameSyncBegin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncBegin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncBegin(FrameSyncBegin other) : this() {
      interval_ = other.interval_;
      index_ = other.index_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncBegin Clone() {
      return new FrameSyncBegin(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private uint interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameSyncBegin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameSyncBegin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Interval != other.Interval) return false;
      if (Index != other.Index) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Interval != 0) hash ^= Interval.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Interval != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Interval);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Interval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Interval);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameSyncBegin other) {
      if (other == null) {
        return;
      }
      if (other.Interval != 0) {
        Interval = other.Interval;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Interval = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[FrameSyncTick]
  /// </summary>
  public sealed partial class FrameSyncTick : pb::IMessage<FrameSyncTick> {
    private static readonly pb::MessageParser<FrameSyncTick> _parser = new pb::MessageParser<FrameSyncTick>(() => new FrameSyncTick());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameSyncTick> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncTick() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncTick(FrameSyncTick other) : this() {
      interval_ = other.interval_;
      index_ = other.index_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncTick Clone() {
      return new FrameSyncTick(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private uint interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    private uint index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameSyncTick);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameSyncTick other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Interval != other.Interval) return false;
      if (Index != other.Index) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Interval != 0) hash ^= Interval.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Interval != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Interval);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Index);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Interval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Interval);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameSyncTick other) {
      if (other == null) {
        return;
      }
      if (other.Interval != 0) {
        Interval = other.Interval;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Interval = input.ReadUInt32();
            break;
          }
          case 16: {
            Index = input.ReadUInt32();
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[FrameSyncEnd]
  /// </summary>
  public sealed partial class FrameSyncEnd : pb::IMessage<FrameSyncEnd> {
    private static readonly pb::MessageParser<FrameSyncEnd> _parser = new pb::MessageParser<FrameSyncEnd>(() => new FrameSyncEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FrameSyncEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncEnd(FrameSyncEnd other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FrameSyncEnd Clone() {
      return new FrameSyncEnd(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FrameSyncEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FrameSyncEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FrameSyncEnd other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///[FrameSyncReq]
  /// </summary>
  public sealed partial class RunToBaseReq : pb::IMessage<RunToBaseReq> {
    private static readonly pb::MessageParser<RunToBaseReq> _parser = new pb::MessageParser<RunToBaseReq>(() => new RunToBaseReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunToBaseReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunToBaseReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunToBaseReq(RunToBaseReq other) : this() {
      tobase_ = other.tobase_;
      curbase_ = other.curbase_;
      time_ = other.time_;
      offset_ = other.offset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunToBaseReq Clone() {
      return new RunToBaseReq(this);
    }

    /// <summary>Field number for the "tobase" field.</summary>
    public const int TobaseFieldNumber = 1;
    private uint tobase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Tobase {
      get { return tobase_; }
      set {
        tobase_ = value;
      }
    }

    /// <summary>Field number for the "curbase" field.</summary>
    public const int CurbaseFieldNumber = 2;
    private uint curbase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Curbase {
      get { return curbase_; }
      set {
        curbase_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private uint time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 4;
    private float offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunToBaseReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunToBaseReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tobase != other.Tobase) return false;
      if (Curbase != other.Curbase) return false;
      if (Time != other.Time) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Offset, other.Offset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tobase != 0) hash ^= Tobase.GetHashCode();
      if (Curbase != 0) hash ^= Curbase.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Offset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Offset);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tobase != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Tobase);
      }
      if (Curbase != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Curbase);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Time);
      }
      if (Offset != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tobase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Tobase);
      }
      if (Curbase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Curbase);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Time);
      }
      if (Offset != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunToBaseReq other) {
      if (other == null) {
        return;
      }
      if (other.Tobase != 0) {
        Tobase = other.Tobase;
      }
      if (other.Curbase != 0) {
        Curbase = other.Curbase;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Offset != 0F) {
        Offset = other.Offset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tobase = input.ReadUInt32();
            break;
          }
          case 16: {
            Curbase = input.ReadUInt32();
            break;
          }
          case 24: {
            Time = input.ReadUInt32();
            break;
          }
          case 37: {
            Offset = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///[FrameSync]
  /// </summary>
  public sealed partial class RunToBaseResp : pb::IMessage<RunToBaseResp> {
    private static readonly pb::MessageParser<RunToBaseResp> _parser = new pb::MessageParser<RunToBaseResp>(() => new RunToBaseResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RunToBaseResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Protocols.CombinedReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunToBaseResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunToBaseResp(RunToBaseResp other) : this() {
      result_ = other.result_ != null ? other.result_.Clone() : null;
      nextSituation_ = other.nextSituation_ != null ? other.nextSituation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RunToBaseResp Clone() {
      return new RunToBaseResp(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Protocols.BatResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.BatResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "nextSituation" field.</summary>
    public const int NextSituationFieldNumber = 2;
    private global::Protocols.FullMatchSituation nextSituation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Protocols.FullMatchSituation NextSituation {
      get { return nextSituation_; }
      set {
        nextSituation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RunToBaseResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RunToBaseResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Result, other.Result)) return false;
      if (!object.Equals(NextSituation, other.NextSituation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (result_ != null) hash ^= Result.GetHashCode();
      if (nextSituation_ != null) hash ^= NextSituation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (result_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Result);
      }
      if (nextSituation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NextSituation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (nextSituation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NextSituation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RunToBaseResp other) {
      if (other == null) {
        return;
      }
      if (other.result_ != null) {
        if (result_ == null) {
          result_ = new global::Protocols.BatResult();
        }
        Result.MergeFrom(other.Result);
      }
      if (other.nextSituation_ != null) {
        if (nextSituation_ == null) {
          nextSituation_ = new global::Protocols.FullMatchSituation();
        }
        NextSituation.MergeFrom(other.NextSituation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (result_ == null) {
              result_ = new global::Protocols.BatResult();
            }
            input.ReadMessage(result_);
            break;
          }
          case 18: {
            if (nextSituation_ == null) {
              nextSituation_ = new global::Protocols.FullMatchSituation();
            }
            input.ReadMessage(nextSituation_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
